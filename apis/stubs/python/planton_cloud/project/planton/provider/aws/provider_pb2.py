# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: project/planton/provider/aws/provider.proto
# Protobuf Python Version: 6.31.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    31,
    1,
    '',
    'project/planton/provider/aws/provider.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from buf.validate import validate_pb2 as buf_dot_validate_dot_validate__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n+project/planton/provider/aws/provider.proto\x12\x1cproject.planton.provider.aws\x1a\x1b\x62uf/validate/validate.proto\"\xf8\x06\n\x11\x41wsProviderConfig\x12w\n\naccount_id\x18\x01 \x01(\tBX\xbaHU\xba\x01O\n\x13spec.aws.account_id\x12\x1eOnly numbers (0-9) are allowed\x1a\x18this.matches(\'^[0-9]+$\')\xc8\x01\x01R\taccountId\x12\xb5\x02\n\raccess_key_id\x18\x02 \x01(\tB\x90\x02\xbaH\x8c\x02r\x03\x98\x01\x14\xba\x01r\n\x19spec.access_key_id.prefix\x12\x38Must start with \'AKIA\' (long-term) or \'ASIA\' (temporary)\x1a\x1bthis.matches(\'^A(K|S)IA.*\')\xba\x01\x8b\x01\n\x19spec.access_key_id.format\x12GMust start with \'AKIA\' or \'ASIA\' followed by 16 alphanumeric characters\x1a%this.matches(\'^.{4}[a-zA-Z0-9]{16}$\')\xc8\x01\x01R\x0b\x61\x63\x63\x65ssKeyId\x12\xdc\x02\n\x11secret_access_key\x18\x03 \x01(\tB\xaf\x02\xbaH\xab\x02r\x03\x98\x01(\xba\x01\x9f\x02\n\x1aspec.aws.secret_access_key\x12\xdb\x01The provided AWS Secret Access Key is invalid. It must contain exactly 40 characters consisting of numbers, lowercase and uppercase letters, slashes (/), and plus signs (+). Please double-check your input and try again.\x1a#this.matches(\'^[0-9a-zA-Z/+]{40}$\')\xc8\x01\x01R\x0fsecretAccessKey\x12#\n\x06region\x18\x04 \x01(\tB\x06\xbaH\x03\xc8\x01\x01H\x00R\x06region\x88\x01\x01\x12#\n\rsession_token\x18\x05 \x01(\tR\x0csessionTokenB\t\n\x07_regionB\xc5\x01\n com.project.planton.provider.awsB\rProviderProtoP\x01\xa2\x02\x04PPPA\xaa\x02\x1cProject.Planton.Provider.Aws\xca\x02\x1cProject\\Planton\\Provider\\Aws\xe2\x02(Project\\Planton\\Provider\\Aws\\GPBMetadata\xea\x02\x1fProject::Planton::Provider::Awsb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'project.planton.provider.aws.provider_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n com.project.planton.provider.awsB\rProviderProtoP\001\242\002\004PPPA\252\002\034Project.Planton.Provider.Aws\312\002\034Project\\Planton\\Provider\\Aws\342\002(Project\\Planton\\Provider\\Aws\\GPBMetadata\352\002\037Project::Planton::Provider::Aws'
  _globals['_AWSPROVIDERCONFIG'].fields_by_name['account_id']._loaded_options = None
  _globals['_AWSPROVIDERCONFIG'].fields_by_name['account_id']._serialized_options = b'\272HU\272\001O\n\023spec.aws.account_id\022\036Only numbers (0-9) are allowed\032\030this.matches(\'^[0-9]+$\')\310\001\001'
  _globals['_AWSPROVIDERCONFIG'].fields_by_name['access_key_id']._loaded_options = None
  _globals['_AWSPROVIDERCONFIG'].fields_by_name['access_key_id']._serialized_options = b'\272H\214\002r\003\230\001\024\272\001r\n\031spec.access_key_id.prefix\0228Must start with \'AKIA\' (long-term) or \'ASIA\' (temporary)\032\033this.matches(\'^A(K|S)IA.*\')\272\001\213\001\n\031spec.access_key_id.format\022GMust start with \'AKIA\' or \'ASIA\' followed by 16 alphanumeric characters\032%this.matches(\'^.{4}[a-zA-Z0-9]{16}$\')\310\001\001'
  _globals['_AWSPROVIDERCONFIG'].fields_by_name['secret_access_key']._loaded_options = None
  _globals['_AWSPROVIDERCONFIG'].fields_by_name['secret_access_key']._serialized_options = b'\272H\253\002r\003\230\001(\272\001\237\002\n\032spec.aws.secret_access_key\022\333\001The provided AWS Secret Access Key is invalid. It must contain exactly 40 characters consisting of numbers, lowercase and uppercase letters, slashes (/), and plus signs (+). Please double-check your input and try again.\032#this.matches(\'^[0-9a-zA-Z/+]{40}$\')\310\001\001'
  _globals['_AWSPROVIDERCONFIG'].fields_by_name['region']._loaded_options = None
  _globals['_AWSPROVIDERCONFIG'].fields_by_name['region']._serialized_options = b'\272H\003\310\001\001'
  _globals['_AWSPROVIDERCONFIG']._serialized_start=107
  _globals['_AWSPROVIDERCONFIG']._serialized_end=995
# @@protoc_insertion_point(module_scope)
