# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: project/planton/provider/kubernetes/workload/microservicekubernetes/v1/spec.proto
# Protobuf Python Version: 6.31.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    31,
    1,
    '',
    'project/planton/provider/kubernetes/workload/microservicekubernetes/v1/spec.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from buf.validate import validate_pb2 as buf_dot_validate_dot_validate__pb2
from project.planton.provider.kubernetes import probe_pb2 as project_dot_planton_dot_provider_dot_kubernetes_dot_probe__pb2
from project.planton.shared.kubernetes import kubernetes_pb2 as project_dot_planton_dot_shared_dot_kubernetes_dot_kubernetes__pb2
from project.planton.shared.kubernetes import options_pb2 as project_dot_planton_dot_shared_dot_kubernetes_dot_options__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\nQproject/planton/provider/kubernetes/workload/microservicekubernetes/v1/spec.proto\x12\x46project.planton.provider.kubernetes.workload.microservicekubernetes.v1\x1a\x1b\x62uf/validate/validate.proto\x1a/project/planton/provider/kubernetes/probe.proto\x1a\x32project/planton/shared/kubernetes/kubernetes.proto\x1a/project/planton/shared/kubernetes/options.proto\"\xf3\x04\n\x1aMicroserviceKubernetesSpec\x12\xe9\x01\n\x07version\x18\x01 \x01(\tB\xce\x01\xbaH\xca\x01r\x04\x10\x01\x18\x1e\xba\x01l\n\x12spec.version.chars\x12\x38Only lowercase letters, numbers, and hyphens are allowed\x1a\x1cthis.matches(\'^[a-z0-9-]+$\')\xba\x01R\n\x1dspec.version.no-hyphen-ending\x12\x1aMust not end with a hyphen\x1a\x15this.matches(\'[^-]$\')R\x07version\x12\x8d\x01\n\tcontainer\x18\x03 \x01(\x0b\x32g.project.planton.provider.kubernetes.workload.microservicekubernetes.v1.MicroserviceKubernetesContainerB\x06\xbaH\x03\xc8\x01\x01R\tcontainer\x12H\n\x07ingress\x18\x04 \x01(\x0b\x32..project.planton.shared.kubernetes.IngressSpecR\x07ingress\x12\x8e\x01\n\x0c\x61vailability\x18\x05 \x01(\x0b\x32j.project.planton.provider.kubernetes.workload.microservicekubernetes.v1.MicroserviceKubernetesAvailabilityR\x0c\x61vailability\"\xf2\x01\n\x1fMicroserviceKubernetesContainer\x12\x84\x01\n\x03\x61pp\x18\x01 \x01(\x0b\x32j.project.planton.provider.kubernetes.workload.microservicekubernetes.v1.MicroserviceKubernetesContainerAppB\x06\xbaH\x03\xc8\x01\x01R\x03\x61pp\x12H\n\x08sidecars\x18\x02 \x03(\x0b\x32,.project.planton.shared.kubernetes.ContainerR\x08sidecars\"\xa7\x07\n\"MicroserviceKubernetesContainerApp\x12\x87\x02\n\x05image\x18\x01 \x01(\x0b\x32\x31.project.planton.shared.kubernetes.ContainerImageB\xbd\x01\xbaH\xb9\x01\xba\x01Z\n\x1dspec.container.app.image.repo\x12\x16Image repo is required\x1a!has(this.repo) && this.repo != \'\'\xba\x01V\n\x1cspec.container.app.image.tag\x12\x15Image tag is required\x1a\x1fhas(this.tag) && this.tag != \'\'\xc8\x01\x01R\x05image\x12v\n\tresources\x18\x02 \x01(\x0b\x32\x35.project.planton.shared.kubernetes.ContainerResourcesB!\xba\xfb\xa4\x02\x1c\n\x0c\n\x05\x31\x30\x30\x30m\x12\x03\x31Gi\x12\x0c\n\x03\x35\x30m\x12\x05\x31\x30\x30MiR\tresources\x12\x7f\n\x03\x65nv\x18\x03 \x01(\x0b\x32m.project.planton.provider.kubernetes.workload.microservicekubernetes.v1.MicroserviceKubernetesContainerAppEnvR\x03\x65nv\x12\x84\x01\n\x05ports\x18\x04 \x03(\x0b\x32n.project.planton.provider.kubernetes.workload.microservicekubernetes.v1.MicroserviceKubernetesContainerAppPortR\x05ports\x12Q\n\x0eliveness_probe\x18\x05 \x01(\x0b\x32*.project.planton.provider.kubernetes.ProbeR\rlivenessProbe\x12S\n\x0freadiness_probe\x18\x06 \x01(\x0b\x32*.project.planton.provider.kubernetes.ProbeR\x0ereadinessProbe\x12O\n\rstartup_probe\x18\x07 \x01(\x0b\x32*.project.planton.provider.kubernetes.ProbeR\x0cstartupProbe\"\xd5\x03\n%MicroserviceKubernetesContainerAppEnv\x12\x9a\x01\n\tvariables\x18\x01 \x03(\x0b\x32|.project.planton.provider.kubernetes.workload.microservicekubernetes.v1.MicroserviceKubernetesContainerAppEnv.VariablesEntryR\tvariables\x12\x94\x01\n\x07secrets\x18\x02 \x03(\x0b\x32z.project.planton.provider.kubernetes.workload.microservicekubernetes.v1.MicroserviceKubernetesContainerAppEnv.SecretsEntryR\x07secrets\x1a<\n\x0eVariablesEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n\x05value\x18\x02 \x01(\tR\x05value:\x02\x38\x01\x1a:\n\x0cSecretsEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n\x05value\x18\x02 \x01(\tR\x05value:\x02\x38\x01\"\xeb\x05\n&MicroserviceKubernetesContainerAppPort\x12\xd0\x02\n\x04name\x18\x01 \x01(\tB\xbb\x02\xbaH\xb7\x02\xba\x01\xb0\x02\n\x1dspec.container.app.ports.name\x12\xe0\x01Name for ports must only contain lowercase alphanumeric characters and hyphens. Port names must also start and end with an alphanumeric character. For example, \'123-abc\' and \'web\' are valid, but \'123_abc\' and \'-web\' are not.\x1a,this.matches(\'^[a-z0-9][a-z0-9-]*[a-z0-9]$\')\xc8\x01\x01R\x04name\x12-\n\x0e\x63ontainer_port\x18\x02 \x01(\x05\x42\x06\xbaH\x03\xc8\x01\x01R\rcontainerPort\x12\xc0\x01\n\x10network_protocol\x18\x03 \x01(\tB\x94\x01\xbaH\x90\x01\xba\x01\x89\x01\n)spec.container.app.ports.network_protocol\x12<The network protocol must be one of \"SCTP\", \"TCP\", or \"UDP\".\x1a\x1ethis in [\"SCTP\", \"TCP\", \"UDP\"]\xc8\x01\x01R\x0fnetworkProtocol\x12)\n\x0c\x61pp_protocol\x18\x04 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x0b\x61ppProtocol\x12)\n\x0cservice_port\x18\x05 \x01(\x05\x42\x06\xbaH\x03\xc8\x01\x01R\x0bservicePort\x12&\n\x0fis_ingress_port\x18\x06 \x01(\x08R\risIngressPort\"\xc1\x04\n\"MicroserviceKubernetesAvailability\x12!\n\x0cmin_replicas\x18\x01 \x01(\x05R\x0bminReplicas\x12\xab\x01\n\x1ahorizontal_pod_autoscaling\x18\x02 \x01(\x0b\x32m.project.planton.provider.kubernetes.workload.microservicekubernetes.v1.MicroserviceKubernetesAvailabilityHpaR\x18horizontalPodAutoscaling\x12\xa1\x01\n\x13\x64\x65ployment_strategy\x18\x03 \x01(\x0b\x32p.project.planton.provider.kubernetes.workload.microservicekubernetes.v1.MicroserviceKubernetesDeploymentStrategyR\x12\x64\x65ploymentStrategy\x12\xa5\x01\n\x15pod_disruption_budget\x18\x04 \x01(\x0b\x32q.project.planton.provider.kubernetes.workload.microservicekubernetes.v1.MicroserviceKubernetesPodDisruptionBudgetR\x13podDisruptionBudget\"\xc7\x01\n%MicroserviceKubernetesAvailabilityHpa\x12\x1d\n\nis_enabled\x18\x01 \x01(\x08R\tisEnabled\x12\x43\n\x1etarget_cpu_utilization_percent\x18\x02 \x01(\x01R\x1btargetCpuUtilizationPercent\x12:\n\x19target_memory_utilization\x18\x03 \x01(\tR\x17targetMemoryUtilization\"p\n(MicroserviceKubernetesDeploymentStrategy\x12\'\n\x0fmax_unavailable\x18\x01 \x01(\tR\x0emaxUnavailable\x12\x1b\n\tmax_surge\x18\x02 \x01(\tR\x08maxSurge\"\x93\x01\n)MicroserviceKubernetesPodDisruptionBudget\x12\x18\n\x07\x65nabled\x18\x01 \x01(\x08R\x07\x65nabled\x12#\n\rmin_available\x18\x02 \x01(\tR\x0cminAvailable\x12\'\n\x0fmax_unavailable\x18\x03 \x01(\tR\x0emaxUnavailableB\x98\x03\nJcom.project.planton.provider.kubernetes.workload.microservicekubernetes.v1B\tSpecProtoP\x01\xa2\x02\x06PPPKWM\xaa\x02\x46Project.Planton.Provider.Kubernetes.Workload.Microservicekubernetes.V1\xca\x02\x46Project\\Planton\\Provider\\Kubernetes\\Workload\\Microservicekubernetes\\V1\xe2\x02RProject\\Planton\\Provider\\Kubernetes\\Workload\\Microservicekubernetes\\V1\\GPBMetadata\xea\x02LProject::Planton::Provider::Kubernetes::Workload::Microservicekubernetes::V1b\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'project.planton.provider.kubernetes.workload.microservicekubernetes.v1.spec_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\nJcom.project.planton.provider.kubernetes.workload.microservicekubernetes.v1B\tSpecProtoP\001\242\002\006PPPKWM\252\002FProject.Planton.Provider.Kubernetes.Workload.Microservicekubernetes.V1\312\002FProject\\Planton\\Provider\\Kubernetes\\Workload\\Microservicekubernetes\\V1\342\002RProject\\Planton\\Provider\\Kubernetes\\Workload\\Microservicekubernetes\\V1\\GPBMetadata\352\002LProject::Planton::Provider::Kubernetes::Workload::Microservicekubernetes::V1'
  _globals['_MICROSERVICEKUBERNETESSPEC'].fields_by_name['version']._loaded_options = None
  _globals['_MICROSERVICEKUBERNETESSPEC'].fields_by_name['version']._serialized_options = b'\272H\312\001r\004\020\001\030\036\272\001l\n\022spec.version.chars\0228Only lowercase letters, numbers, and hyphens are allowed\032\034this.matches(\'^[a-z0-9-]+$\')\272\001R\n\035spec.version.no-hyphen-ending\022\032Must not end with a hyphen\032\025this.matches(\'[^-]$\')'
  _globals['_MICROSERVICEKUBERNETESSPEC'].fields_by_name['container']._loaded_options = None
  _globals['_MICROSERVICEKUBERNETESSPEC'].fields_by_name['container']._serialized_options = b'\272H\003\310\001\001'
  _globals['_MICROSERVICEKUBERNETESCONTAINER'].fields_by_name['app']._loaded_options = None
  _globals['_MICROSERVICEKUBERNETESCONTAINER'].fields_by_name['app']._serialized_options = b'\272H\003\310\001\001'
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPP'].fields_by_name['image']._loaded_options = None
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPP'].fields_by_name['image']._serialized_options = b'\272H\271\001\272\001Z\n\035spec.container.app.image.repo\022\026Image repo is required\032!has(this.repo) && this.repo != \'\'\272\001V\n\034spec.container.app.image.tag\022\025Image tag is required\032\037has(this.tag) && this.tag != \'\'\310\001\001'
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPP'].fields_by_name['resources']._loaded_options = None
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPP'].fields_by_name['resources']._serialized_options = b'\272\373\244\002\034\n\014\n\0051000m\022\0031Gi\022\014\n\00350m\022\005100Mi'
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPENV_VARIABLESENTRY']._loaded_options = None
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPENV_VARIABLESENTRY']._serialized_options = b'8\001'
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPENV_SECRETSENTRY']._loaded_options = None
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPENV_SECRETSENTRY']._serialized_options = b'8\001'
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPPORT'].fields_by_name['name']._loaded_options = None
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPPORT'].fields_by_name['name']._serialized_options = b'\272H\267\002\272\001\260\002\n\035spec.container.app.ports.name\022\340\001Name for ports must only contain lowercase alphanumeric characters and hyphens. Port names must also start and end with an alphanumeric character. For example, \'123-abc\' and \'web\' are valid, but \'123_abc\' and \'-web\' are not.\032,this.matches(\'^[a-z0-9][a-z0-9-]*[a-z0-9]$\')\310\001\001'
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPPORT'].fields_by_name['container_port']._loaded_options = None
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPPORT'].fields_by_name['container_port']._serialized_options = b'\272H\003\310\001\001'
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPPORT'].fields_by_name['network_protocol']._loaded_options = None
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPPORT'].fields_by_name['network_protocol']._serialized_options = b'\272H\220\001\272\001\211\001\n)spec.container.app.ports.network_protocol\022<The network protocol must be one of \"SCTP\", \"TCP\", or \"UDP\".\032\036this in [\"SCTP\", \"TCP\", \"UDP\"]\310\001\001'
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPPORT'].fields_by_name['app_protocol']._loaded_options = None
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPPORT'].fields_by_name['app_protocol']._serialized_options = b'\272H\003\310\001\001'
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPPORT'].fields_by_name['service_port']._loaded_options = None
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPPORT'].fields_by_name['service_port']._serialized_options = b'\272H\003\310\001\001'
  _globals['_MICROSERVICEKUBERNETESSPEC']._serialized_start=337
  _globals['_MICROSERVICEKUBERNETESSPEC']._serialized_end=964
  _globals['_MICROSERVICEKUBERNETESCONTAINER']._serialized_start=967
  _globals['_MICROSERVICEKUBERNETESCONTAINER']._serialized_end=1209
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPP']._serialized_start=1212
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPP']._serialized_end=2147
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPENV']._serialized_start=2150
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPENV']._serialized_end=2619
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPENV_VARIABLESENTRY']._serialized_start=2499
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPENV_VARIABLESENTRY']._serialized_end=2559
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPENV_SECRETSENTRY']._serialized_start=2561
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPENV_SECRETSENTRY']._serialized_end=2619
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPPORT']._serialized_start=2622
  _globals['_MICROSERVICEKUBERNETESCONTAINERAPPPORT']._serialized_end=3369
  _globals['_MICROSERVICEKUBERNETESAVAILABILITY']._serialized_start=3372
  _globals['_MICROSERVICEKUBERNETESAVAILABILITY']._serialized_end=3949
  _globals['_MICROSERVICEKUBERNETESAVAILABILITYHPA']._serialized_start=3952
  _globals['_MICROSERVICEKUBERNETESAVAILABILITYHPA']._serialized_end=4151
  _globals['_MICROSERVICEKUBERNETESDEPLOYMENTSTRATEGY']._serialized_start=4153
  _globals['_MICROSERVICEKUBERNETESDEPLOYMENTSTRATEGY']._serialized_end=4265
  _globals['_MICROSERVICEKUBERNETESPODDISRUPTIONBUDGET']._serialized_start=4268
  _globals['_MICROSERVICEKUBERNETESPODDISRUPTIONBUDGET']._serialized_end=4415
# @@protoc_insertion_point(module_scope)
