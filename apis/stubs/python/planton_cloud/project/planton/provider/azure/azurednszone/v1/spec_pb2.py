# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: project/planton/provider/azure/azurednszone/v1/spec.proto
# Protobuf Python Version: 6.31.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    31,
    1,
    '',
    'project/planton/provider/azure/azurednszone/v1/spec.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from buf.validate import validate_pb2 as buf_dot_validate_dot_validate__pb2
from project.planton.shared.networking.enums.dnsrecordtype import dns_record_type_pb2 as project_dot_planton_dot_shared_dot_networking_dot_enums_dot_dnsrecordtype_dot_dns__record__type__pb2
from project.planton.shared.options import options_pb2 as project_dot_planton_dot_shared_dot_options_dot_options__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n9project/planton/provider/azure/azurednszone/v1/spec.proto\x12.project.planton.provider.azure.azurednszone.v1\x1a\x1b\x62uf/validate/validate.proto\x1aKproject/planton/shared/networking/enums/dnsrecordtype/dns_record_type.proto\x1a,project/planton/shared/options/options.proto\"\xb8\x02\n\x10\x41zureDnsZoneSpec\x12\x9a\x01\n\tzone_name\x18\x01 \x01(\tB}\xbaHz\xba\x01t\n\tzone_name\x12\x38Zone name must be a valid DNS domain (e.g., example.com)\x1a-this.matches(\'^(?:[a-z0-9-]+[.])+[a-z]{2,}$\')\xc8\x01\x01R\x08zoneName\x12-\n\x0eresource_group\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\rresourceGroup\x12X\n\x07records\x18\x03 \x03(\x0b\x32>.project.planton.provider.azure.azurednszone.v1.AzureDnsRecordR\x07records\"\xc8\x03\n\x0e\x41zureDnsRecord\x12m\n\x0brecord_type\x18\x01 \x01(\x0e\x32\x44.project.planton.shared.networking.enums.dnsrecordtype.DnsRecordTypeB\x06\xbaH\x03\xc8\x01\x01R\nrecordType\x12\xe6\x01\n\x04name\x18\x02 \x01(\tB\xd1\x01\xbaH\xcd\x01\xba\x01\xc6\x01\n\x0brecord_name\x12\x44Record name should be a valid DNS name. Use a trailing dot for FQDN.\x1aqthis.matches(\'^(?:[*][.])?(?:[_a-z0-9](?:[_a-z0-9-]{0,61}[a-z0-9])?[.])+(?:[a-z](?:[a-z0-9-]{0,61}[a-z0-9])?)?$\')\xc8\x01\x01R\x04name\x12 \n\x06values\x18\x03 \x03(\tB\x08\xbaH\x05\x92\x01\x02\x08\x01R\x06values\x12,\n\x0bttl_seconds\x18\x04 \x01(\x05\x42\x06\x8a\xa6\x1d\x02\x36\x30H\x00R\nttlSeconds\x88\x01\x01\x42\x0e\n\x0c_ttl_secondsB\x9e\x02\n2com.project.planton.provider.azure.azurednszone.v1B\tSpecProtoP\x01\xa2\x02\x05PPPAA\xaa\x02.Project.Planton.Provider.Azure.Azurednszone.V1\xca\x02.Project\\Planton\\Provider\\Azure\\Azurednszone\\V1\xe2\x02:Project\\Planton\\Provider\\Azure\\Azurednszone\\V1\\GPBMetadata\xea\x02\x33Project::Planton::Provider::Azure::Azurednszone::V1b\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'project.planton.provider.azure.azurednszone.v1.spec_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n2com.project.planton.provider.azure.azurednszone.v1B\tSpecProtoP\001\242\002\005PPPAA\252\002.Project.Planton.Provider.Azure.Azurednszone.V1\312\002.Project\\Planton\\Provider\\Azure\\Azurednszone\\V1\342\002:Project\\Planton\\Provider\\Azure\\Azurednszone\\V1\\GPBMetadata\352\0023Project::Planton::Provider::Azure::Azurednszone::V1'
  _globals['_AZUREDNSZONESPEC'].fields_by_name['zone_name']._loaded_options = None
  _globals['_AZUREDNSZONESPEC'].fields_by_name['zone_name']._serialized_options = b'\272Hz\272\001t\n\tzone_name\0228Zone name must be a valid DNS domain (e.g., example.com)\032-this.matches(\'^(?:[a-z0-9-]+[.])+[a-z]{2,}$\')\310\001\001'
  _globals['_AZUREDNSZONESPEC'].fields_by_name['resource_group']._loaded_options = None
  _globals['_AZUREDNSZONESPEC'].fields_by_name['resource_group']._serialized_options = b'\272H\003\310\001\001'
  _globals['_AZUREDNSRECORD'].fields_by_name['record_type']._loaded_options = None
  _globals['_AZUREDNSRECORD'].fields_by_name['record_type']._serialized_options = b'\272H\003\310\001\001'
  _globals['_AZUREDNSRECORD'].fields_by_name['name']._loaded_options = None
  _globals['_AZUREDNSRECORD'].fields_by_name['name']._serialized_options = b'\272H\315\001\272\001\306\001\n\013record_name\022DRecord name should be a valid DNS name. Use a trailing dot for FQDN.\032qthis.matches(\'^(?:[*][.])?(?:[_a-z0-9](?:[_a-z0-9-]{0,61}[a-z0-9])?[.])+(?:[a-z](?:[a-z0-9-]{0,61}[a-z0-9])?)?$\')\310\001\001'
  _globals['_AZUREDNSRECORD'].fields_by_name['values']._loaded_options = None
  _globals['_AZUREDNSRECORD'].fields_by_name['values']._serialized_options = b'\272H\005\222\001\002\010\001'
  _globals['_AZUREDNSRECORD'].fields_by_name['ttl_seconds']._loaded_options = None
  _globals['_AZUREDNSRECORD'].fields_by_name['ttl_seconds']._serialized_options = b'\212\246\035\00260'
  _globals['_AZUREDNSZONESPEC']._serialized_start=262
  _globals['_AZUREDNSZONESPEC']._serialized_end=574
  _globals['_AZUREDNSRECORD']._serialized_start=577
  _globals['_AZUREDNSRECORD']._serialized_end=1033
# @@protoc_insertion_point(module_scope)
