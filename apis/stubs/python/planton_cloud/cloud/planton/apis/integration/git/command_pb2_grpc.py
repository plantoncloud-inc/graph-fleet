# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.integration.git import io_pb2 as cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2


class GitCommandControllerStub(object):
    """Git command controller (mutating operations).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createBranch = channel.unary_unary(
                '/cloud.planton.apis.integration.git.GitCommandController/createBranch',
                request_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.CreateBranchInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.Branch.FromString,
                _registered_method=True)
        self.updateFile = channel.unary_unary(
                '/cloud.planton.apis.integration.git.GitCommandController/updateFile',
                request_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.UpdateFileInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.UpdateFileResponse.FromString,
                _registered_method=True)
        self.openPullRequest = channel.unary_unary(
                '/cloud.planton.apis.integration.git.GitCommandController/openPullRequest',
                request_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.OpenPullRequestInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.OpenPullRequestResponse.FromString,
                _registered_method=True)


class GitCommandControllerServicer(object):
    """Git command controller (mutating operations).
    """

    def createBranch(self, request, context):
        """Create a new branch from a given commit (or default branch HEAD if unspecified).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateFile(self, request, context):
        """Update (create/replace) a single file with optimistic locking.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openPullRequest(self, request, context):
        """Optional: open a pull request between branches.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GitCommandControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.createBranch,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.CreateBranchInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.Branch.SerializeToString,
            ),
            'updateFile': grpc.unary_unary_rpc_method_handler(
                    servicer.updateFile,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.UpdateFileInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.UpdateFileResponse.SerializeToString,
            ),
            'openPullRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.openPullRequest,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.OpenPullRequestInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.OpenPullRequestResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.integration.git.GitCommandController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.integration.git.GitCommandController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GitCommandController(object):
    """Git command controller (mutating operations).
    """

    @staticmethod
    def createBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.integration.git.GitCommandController/createBranch',
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.CreateBranchInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.Branch.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.integration.git.GitCommandController/updateFile',
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.UpdateFileInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.UpdateFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def openPullRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.integration.git.GitCommandController/openPullRequest',
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.OpenPullRequestInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.OpenPullRequestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
