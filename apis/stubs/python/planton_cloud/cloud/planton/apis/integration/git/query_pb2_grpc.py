# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.integration.git import io_pb2 as cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2


class GitQueryControllerStub(object):
    """Git query controller (read-only operations).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.listBranches = channel.unary_unary(
                '/cloud.planton.apis.integration.git.GitQueryController/listBranches',
                request_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.RepoRef.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.BranchList.FromString,
                _registered_method=True)
        self.listTree = channel.unary_unary(
                '/cloud.planton.apis.integration.git.GitQueryController/listTree',
                request_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.ListTreeInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.TreeList.FromString,
                _registered_method=True)
        self.findFilesByGlob = channel.unary_unary(
                '/cloud.planton.apis.integration.git.GitQueryController/findFilesByGlob',
                request_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.FindFilesByGlobInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.FileList.FromString,
                _registered_method=True)
        self.getFile = channel.unary_unary(
                '/cloud.planton.apis.integration.git.GitQueryController/getFile',
                request_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.GetFileInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.FileContent.FromString,
                _registered_method=True)


class GitQueryControllerServicer(object):
    """Git query controller (read-only operations).
    """

    def listBranches(self, request, context):
        """List branches in a repository.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listTree(self, request, context):
        """List a directory tree at a path.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findFilesByGlob(self, request, context):
        """Find files matching one or more glob patterns.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFile(self, request, context):
        """Fetch the content of a file at a given path.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GitQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'listBranches': grpc.unary_unary_rpc_method_handler(
                    servicer.listBranches,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.RepoRef.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.BranchList.SerializeToString,
            ),
            'listTree': grpc.unary_unary_rpc_method_handler(
                    servicer.listTree,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.ListTreeInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.TreeList.SerializeToString,
            ),
            'findFilesByGlob': grpc.unary_unary_rpc_method_handler(
                    servicer.findFilesByGlob,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.FindFilesByGlobInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.FileList.SerializeToString,
            ),
            'getFile': grpc.unary_unary_rpc_method_handler(
                    servicer.getFile,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.GetFileInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.FileContent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.integration.git.GitQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.integration.git.GitQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GitQueryController(object):
    """Git query controller (read-only operations).
    """

    @staticmethod
    def listBranches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.integration.git.GitQueryController/listBranches',
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.RepoRef.SerializeToString,
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.BranchList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listTree(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.integration.git.GitQueryController/listTree',
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.ListTreeInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.TreeList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def findFilesByGlob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.integration.git.GitQueryController/findFilesByGlob',
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.FindFilesByGlobInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.FileList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.integration.git.GitQueryController/getFile',
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.GetFileInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_integration_dot_git_dot_io__pb2.FileContent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
