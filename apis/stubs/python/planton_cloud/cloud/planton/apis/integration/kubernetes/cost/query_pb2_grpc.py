# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.integration.kubernetes.cost import io_pb2 as cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_cost_dot_io__pb2


class CostAllocationQueryControllerStub(object):
    """cost allocation query controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.listByCostAllocationFilters = channel.unary_unary(
                '/cloud.planton.apis.integration.kubernetes.cost.CostAllocationQueryController/listByCostAllocationFilters',
                request_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_cost_dot_io__pb2.ListByCostAllocationFiltersInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_cost_dot_io__pb2.CostAllocationList.FromString,
                _registered_method=True)
        self.getCostAggregateByResourceId = channel.unary_unary(
                '/cloud.planton.apis.integration.kubernetes.cost.CostAllocationQueryController/getCostAggregateByResourceId',
                request_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_cost_dot_io__pb2.GetCostAggregateInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_cost_dot_io__pb2.CostAggregate.FromString,
                _registered_method=True)


class CostAllocationQueryControllerServicer(object):
    """cost allocation query controller
    """

    def listByCostAllocationFilters(self, request, context):
        """Get Cost allocation data by search filters
        This returns a paginated list of cost allocation data
        Filters include start and end date so organization identifier, environment identifier and posting environment identifier
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCostAggregateByResourceId(self, request, context):
        """get cost aggregate by timestamp for a given resource.
        example: Get month to date cost of a postgres cluster
        example: Get month to date cost of a kafka cluster
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CostAllocationQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'listByCostAllocationFilters': grpc.unary_unary_rpc_method_handler(
                    servicer.listByCostAllocationFilters,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_cost_dot_io__pb2.ListByCostAllocationFiltersInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_cost_dot_io__pb2.CostAllocationList.SerializeToString,
            ),
            'getCostAggregateByResourceId': grpc.unary_unary_rpc_method_handler(
                    servicer.getCostAggregateByResourceId,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_cost_dot_io__pb2.GetCostAggregateInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_cost_dot_io__pb2.CostAggregate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.integration.kubernetes.cost.CostAllocationQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.integration.kubernetes.cost.CostAllocationQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CostAllocationQueryController(object):
    """cost allocation query controller
    """

    @staticmethod
    def listByCostAllocationFilters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.integration.kubernetes.cost.CostAllocationQueryController/listByCostAllocationFilters',
            cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_cost_dot_io__pb2.ListByCostAllocationFiltersInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_cost_dot_io__pb2.CostAllocationList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getCostAggregateByResourceId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.integration.kubernetes.cost.CostAllocationQueryController/getCostAggregateByResourceId',
            cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_cost_dot_io__pb2.GetCostAggregateInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_cost_dot_io__pb2.CostAggregate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
