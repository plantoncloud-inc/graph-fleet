# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.connect.kubernetesclustercredential.v1 import api_pb2 as cloud_dot_planton_dot_apis_dot_connect_dot_kubernetesclustercredential_dot_v1_dot_api__pb2
from cloud.planton.apis.infrahub.cloudresource.v1.provider.kubernetes import io_pb2 as cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_provider_dot_kubernetes_dot_io__pb2


class KubernetesCloudResourceQueryControllerStub(object):
    """kubernetes cloud-resource query controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getKubernetesClusterCredential = channel.unary_unary(
                '/cloud.planton.apis.infrahub.cloudresource.v1.provider.kubernetes.KubernetesCloudResourceQueryController/getKubernetesClusterCredential',
                request_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_provider_dot_kubernetes_dot_io__pb2.KubernetesClusterIdentifier.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_connect_dot_kubernetesclustercredential_dot_v1_dot_api__pb2.KubernetesClusterCredential.FromString,
                _registered_method=True)


class KubernetesCloudResourceQueryControllerServicer(object):
    """kubernetes cloud-resource query controller
    """

    def getKubernetesClusterCredential(self, request, context):
        """get kubernetes cluster credential for the specified kubernetes-cluster in the input
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KubernetesCloudResourceQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getKubernetesClusterCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.getKubernetesClusterCredential,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_provider_dot_kubernetes_dot_io__pb2.KubernetesClusterIdentifier.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_connect_dot_kubernetesclustercredential_dot_v1_dot_api__pb2.KubernetesClusterCredential.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.infrahub.cloudresource.v1.provider.kubernetes.KubernetesCloudResourceQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.infrahub.cloudresource.v1.provider.kubernetes.KubernetesCloudResourceQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class KubernetesCloudResourceQueryController(object):
    """kubernetes cloud-resource query controller
    """

    @staticmethod
    def getKubernetesClusterCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.infrahub.cloudresource.v1.provider.kubernetes.KubernetesCloudResourceQueryController/getKubernetesClusterCredential',
            cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_provider_dot_kubernetes_dot_io__pb2.KubernetesClusterIdentifier.SerializeToString,
            cloud_dot_planton_dot_apis_dot_connect_dot_kubernetesclustercredential_dot_v1_dot_api__pb2.KubernetesClusterCredential.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
