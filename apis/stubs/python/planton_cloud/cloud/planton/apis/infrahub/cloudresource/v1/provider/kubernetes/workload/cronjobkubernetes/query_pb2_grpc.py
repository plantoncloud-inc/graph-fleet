# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.infrahub.cloudresource.v1.provider.kubernetes.workload.cronjobkubernetes import io_pb2 as cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_provider_dot_kubernetes_dot_workload_dot_cronjobkubernetes_dot_io__pb2


class CronJobKubernetesQueryControllerStub(object):
    """cron-job-kubernetes query controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getEnvVarMap = channel.unary_unary(
                '/cloud.planton.apis.infrahub.cloudresource.v1.provider.kubernetes.workload.cronjobkubernetes.CronJobKubernetesQueryController/getEnvVarMap',
                request_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_provider_dot_kubernetes_dot_workload_dot_cronjobkubernetes_dot_io__pb2.GetCronJobKubernetesEnvVarMapInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_provider_dot_kubernetes_dot_workload_dot_cronjobkubernetes_dot_io__pb2.CronJobKubernetesEnvVarMap.FromString,
                _registered_method=True)


class CronJobKubernetesQueryControllerServicer(object):
    """cron-job-kubernetes query controller
    """

    def getEnvVarMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CronJobKubernetesQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getEnvVarMap': grpc.unary_unary_rpc_method_handler(
                    servicer.getEnvVarMap,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_provider_dot_kubernetes_dot_workload_dot_cronjobkubernetes_dot_io__pb2.GetCronJobKubernetesEnvVarMapInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_provider_dot_kubernetes_dot_workload_dot_cronjobkubernetes_dot_io__pb2.CronJobKubernetesEnvVarMap.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.infrahub.cloudresource.v1.provider.kubernetes.workload.cronjobkubernetes.CronJobKubernetesQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.infrahub.cloudresource.v1.provider.kubernetes.workload.cronjobkubernetes.CronJobKubernetesQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CronJobKubernetesQueryController(object):
    """cron-job-kubernetes query controller
    """

    @staticmethod
    def getEnvVarMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.infrahub.cloudresource.v1.provider.kubernetes.workload.cronjobkubernetes.CronJobKubernetesQueryController/getEnvVarMap',
            cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_provider_dot_kubernetes_dot_workload_dot_cronjobkubernetes_dot_io__pb2.GetCronJobKubernetesEnvVarMapInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_provider_dot_kubernetes_dot_workload_dot_cronjobkubernetes_dot_io__pb2.CronJobKubernetesEnvVarMap.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
