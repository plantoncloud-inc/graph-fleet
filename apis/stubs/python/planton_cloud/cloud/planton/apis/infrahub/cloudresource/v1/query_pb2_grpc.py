# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.commons.apiresource import find_pb2 as cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_find__pb2
from cloud.planton.apis.infrahub.cloudresource.v1 import api_pb2 as cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_api__pb2
from cloud.planton.apis.infrahub.cloudresource.v1 import graph_pb2 as cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_graph__pb2
from cloud.planton.apis.infrahub.cloudresource.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2
from cloud.planton.apis.resourcemanager.organization.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2


class CloudResourceQueryControllerStub(object):
    """cloud-resource query controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get = channel.unary_unary(
                '/cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceQueryController/get',
                request_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.CloudResourceId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_api__pb2.CloudResource.FromString,
                _registered_method=True)
        self.streamByOrg = channel.unary_stream(
                '/cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceQueryController/streamByOrg',
                request_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_api__pb2.CloudResource.FromString,
                _registered_method=True)
        self.getByOrgByEnvByKindBySlug = channel.unary_unary(
                '/cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceQueryController/getByOrgByEnvByKindBySlug',
                request_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.CloudResourceByOrgByEnvByKindBySlugRequest.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_api__pb2.CloudResource.FromString,
                _registered_method=True)
        self.resolveValueFromReferences = channel.unary_unary(
                '/cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceQueryController/resolveValueFromReferences',
                request_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.ResolveValueFromReferencesRequest.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.ResolveValueFromReferencesResponse.FromString,
                _registered_method=True)
        self.find = channel.unary_unary(
                '/cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceQueryController/find',
                request_serializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_find__pb2.FindApiResourcesRequest.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.CloudResourceList.FromString,
                _registered_method=True)


class CloudResourceQueryControllerServicer(object):
    """cloud-resource query controller
    """

    def get(self, request, context):
        """get cloud resource by id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamByOrg(self, request, context):
        """stream all cloud resources that belong to the organization
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getByOrgByEnvByKindBySlug(self, request, context):
        """get cloud resource by organization, environment, cloud-resource-kind and slug
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resolveValueFromReferences(self, request, context):
        """resolve value-from references in any cloud-resource
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def find(self, request, context):
        """find cloud resources with pagination and filtering
        supports filtering by org, env, and cloud_resource_kind (spec.kind field)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CloudResourceQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.CloudResourceId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_api__pb2.CloudResource.SerializeToString,
            ),
            'streamByOrg': grpc.unary_stream_rpc_method_handler(
                    servicer.streamByOrg,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_api__pb2.CloudResource.SerializeToString,
            ),
            'getByOrgByEnvByKindBySlug': grpc.unary_unary_rpc_method_handler(
                    servicer.getByOrgByEnvByKindBySlug,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.CloudResourceByOrgByEnvByKindBySlugRequest.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_api__pb2.CloudResource.SerializeToString,
            ),
            'resolveValueFromReferences': grpc.unary_unary_rpc_method_handler(
                    servicer.resolveValueFromReferences,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.ResolveValueFromReferencesRequest.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.ResolveValueFromReferencesResponse.SerializeToString,
            ),
            'find': grpc.unary_unary_rpc_method_handler(
                    servicer.find,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_find__pb2.FindApiResourcesRequest.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.CloudResourceList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CloudResourceQueryController(object):
    """cloud-resource query controller
    """

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceQueryController/get',
            cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.CloudResourceId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_api__pb2.CloudResource.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def streamByOrg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceQueryController/streamByOrg',
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_api__pb2.CloudResource.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getByOrgByEnvByKindBySlug(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceQueryController/getByOrgByEnvByKindBySlug',
            cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.CloudResourceByOrgByEnvByKindBySlugRequest.SerializeToString,
            cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_api__pb2.CloudResource.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def resolveValueFromReferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceQueryController/resolveValueFromReferences',
            cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.ResolveValueFromReferencesRequest.SerializeToString,
            cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.ResolveValueFromReferencesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceQueryController/find',
            cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_find__pb2.FindApiResourcesRequest.SerializeToString,
            cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.CloudResourceList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CloudResourceGraphQueryControllerStub(object):
    """cloud-resource graph query controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getCloudResourcesGraphView = channel.unary_unary(
                '/cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceGraphQueryController/getCloudResourcesGraphView',
                request_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.GetCloudResourcesGraphViewRequest.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_graph__pb2.CloudResourceGraphView.FromString,
                _registered_method=True)


class CloudResourceGraphQueryControllerServicer(object):
    """cloud-resource graph query controller
    """

    def getCloudResourcesGraphView(self, request, context):
        """rpc to get cloud resources graph view
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CloudResourceGraphQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getCloudResourcesGraphView': grpc.unary_unary_rpc_method_handler(
                    servicer.getCloudResourcesGraphView,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.GetCloudResourcesGraphViewRequest.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_graph__pb2.CloudResourceGraphView.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceGraphQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceGraphQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CloudResourceGraphQueryController(object):
    """cloud-resource graph query controller
    """

    @staticmethod
    def getCloudResourcesGraphView(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.infrahub.cloudresource.v1.CloudResourceGraphQueryController/getCloudResourcesGraphView',
            cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_io__pb2.GetCloudResourcesGraphViewRequest.SerializeToString,
            cloud_dot_planton_dot_apis_dot_infrahub_dot_cloudresource_dot_v1_dot_graph__pb2.CloudResourceGraphView.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
