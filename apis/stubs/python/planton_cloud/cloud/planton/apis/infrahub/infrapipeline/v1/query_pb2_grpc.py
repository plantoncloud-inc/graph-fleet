# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.infrahub.infrapipeline.v1 import api_pb2 as cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_api__pb2
from cloud.planton.apis.infrahub.infrapipeline.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2
from cloud.planton.apis.infrahub.infraproject.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_infrahub_dot_infraproject_dot_v1_dot_io__pb2
from cloud.planton.apis.integration.tekton import log_pb2 as cloud_dot_planton_dot_apis_dot_integration_dot_tekton_dot_log__pb2


class InfraPipelineQueryControllerStub(object):
    """infra-pipeline query controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get = channel.unary_unary(
                '/cloud.planton.apis.infrahub.infrapipeline.v1.InfraPipelineQueryController/get',
                request_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.InfraPipelineId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_api__pb2.InfraPipeline.FromString,
                _registered_method=True)
        self.getStatusStream = channel.unary_stream(
                '/cloud.planton.apis.infrahub.infrapipeline.v1.InfraPipelineQueryController/getStatusStream',
                request_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.InfraPipelineId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_api__pb2.InfraPipelineStatus.FromString,
                _registered_method=True)
        self.getLogStream = channel.unary_stream(
                '/cloud.planton.apis.infrahub.infrapipeline.v1.InfraPipelineQueryController/getLogStream',
                request_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.InfraPipelineId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_tekton_dot_log__pb2.TektonTaskLogEntry.FromString,
                _registered_method=True)
        self.listByFilters = channel.unary_unary(
                '/cloud.planton.apis.infrahub.infrapipeline.v1.InfraPipelineQueryController/listByFilters',
                request_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.ListInfraPipelinesByFiltersInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.InfraPipelineList.FromString,
                _registered_method=True)
        self.getLastInfraPipelineByInfraProjectId = channel.unary_unary(
                '/cloud.planton.apis.infrahub.infrapipeline.v1.InfraPipelineQueryController/getLastInfraPipelineByInfraProjectId',
                request_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infraproject_dot_v1_dot_io__pb2.InfraProjectId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_api__pb2.InfraPipeline.FromString,
                _registered_method=True)


class InfraPipelineQueryControllerServicer(object):
    """infra-pipeline query controller
    """

    def get(self, request, context):
        """lookup a infra-pipeline using id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStatusStream(self, request, context):
        """streams infra-pipeline status in real-time when the infra-pipeline is still in progress.
        the status is loaded from redis event stream.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLogStream(self, request, context):
        """streams pipeline logs for a given pipeline id in real-time when the pipeline is still in progress.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listByFilters(self, request, context):
        """authorization is handled explicitly. caller should be a member of the organization to which the infra-project belongs to.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLastInfraPipelineByInfraProjectId(self, request, context):
        """authorization is handled explicitly. caller should be a member of the organization to which the infra-project belongs to.
        look up the most recent infra-pipeline for a given infra-project id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InfraPipelineQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.InfraPipelineId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_api__pb2.InfraPipeline.SerializeToString,
            ),
            'getStatusStream': grpc.unary_stream_rpc_method_handler(
                    servicer.getStatusStream,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.InfraPipelineId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_api__pb2.InfraPipelineStatus.SerializeToString,
            ),
            'getLogStream': grpc.unary_stream_rpc_method_handler(
                    servicer.getLogStream,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.InfraPipelineId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_tekton_dot_log__pb2.TektonTaskLogEntry.SerializeToString,
            ),
            'listByFilters': grpc.unary_unary_rpc_method_handler(
                    servicer.listByFilters,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.ListInfraPipelinesByFiltersInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.InfraPipelineList.SerializeToString,
            ),
            'getLastInfraPipelineByInfraProjectId': grpc.unary_unary_rpc_method_handler(
                    servicer.getLastInfraPipelineByInfraProjectId,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infraproject_dot_v1_dot_io__pb2.InfraProjectId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_api__pb2.InfraPipeline.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.infrahub.infrapipeline.v1.InfraPipelineQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.infrahub.infrapipeline.v1.InfraPipelineQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class InfraPipelineQueryController(object):
    """infra-pipeline query controller
    """

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.infrahub.infrapipeline.v1.InfraPipelineQueryController/get',
            cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.InfraPipelineId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_api__pb2.InfraPipeline.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getStatusStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/cloud.planton.apis.infrahub.infrapipeline.v1.InfraPipelineQueryController/getStatusStream',
            cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.InfraPipelineId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_api__pb2.InfraPipelineStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getLogStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/cloud.planton.apis.infrahub.infrapipeline.v1.InfraPipelineQueryController/getLogStream',
            cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.InfraPipelineId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_integration_dot_tekton_dot_log__pb2.TektonTaskLogEntry.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listByFilters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.infrahub.infrapipeline.v1.InfraPipelineQueryController/listByFilters',
            cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.ListInfraPipelinesByFiltersInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_io__pb2.InfraPipelineList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getLastInfraPipelineByInfraProjectId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.infrahub.infrapipeline.v1.InfraPipelineQueryController/getLastInfraPipelineByInfraProjectId',
            cloud_dot_planton_dot_apis_dot_infrahub_dot_infraproject_dot_v1_dot_io__pb2.InfraProjectId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_infrahub_dot_infrapipeline_dot_v1_dot_api__pb2.InfraPipeline.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
