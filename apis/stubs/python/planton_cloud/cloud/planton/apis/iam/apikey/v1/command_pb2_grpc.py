# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.iam.apikey.v1 import api_pb2 as cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2
from cloud.planton.apis.iam.apikey.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_io__pb2


class ApiKeyCommandControllerStub(object):
    """api-key command controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/cloud.planton.apis.iam.apikey.v1.ApiKeyCommandController/create',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.FromString,
                _registered_method=True)
        self.update = channel.unary_unary(
                '/cloud.planton.apis.iam.apikey.v1.ApiKeyCommandController/update',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.FromString,
                _registered_method=True)
        self.delete = channel.unary_unary(
                '/cloud.planton.apis.iam.apikey.v1.ApiKeyCommandController/delete',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_io__pb2.ApiKeyId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.FromString,
                _registered_method=True)


class ApiKeyCommandControllerServicer(object):
    """api-key command controller
    """

    def create(self, request, context):
        """create an api-key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """update an existing api-key
        authorization is performed based on the token type (org/user)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """delete an existing api-key
        authorization is performed based on the token type (org/user) for token to be deleted
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiKeyCommandControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_io__pb2.ApiKeyId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.iam.apikey.v1.ApiKeyCommandController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.iam.apikey.v1.ApiKeyCommandController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiKeyCommandController(object):
    """api-key command controller
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.apikey.v1.ApiKeyCommandController/create',
            cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.apikey.v1.ApiKeyCommandController/update',
            cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.apikey.v1.ApiKeyCommandController/delete',
            cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_io__pb2.ApiKeyId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_apikey_dot_v1_dot_api__pb2.ApiKey.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
