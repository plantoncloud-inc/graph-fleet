# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.iam.iampolicy.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2


class IamPolicyQueryControllerStub(object):
    """iam policy query controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getByApiResourceKindAndResourceId = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getByApiResourceKindAndResourceId',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.GetIamPolicyByApiResourceKindAndResourceIdInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IamPoliciesByPrincipal.FromString,
                _registered_method=True)
        self.getByApiResourceKindAndResourceIdGroupByRole = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getByApiResourceKindAndResourceIdGroupByRole',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.GetIamPolicyByApiResourceKindAndResourceIdInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IamPoliciesByRole.FromString,
                _registered_method=True)
        self.getEnvironmentByApiResourceKindAndResourceIdGroupByRole = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getEnvironmentByApiResourceKindAndResourceIdGroupByRole',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.GetIamPolicyByApiResourceKindAndResourceIdInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IamPoliciesByRole.FromString,
                _registered_method=True)
        self.checkAuthorization = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/checkAuthorization',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizationInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IsAuthorized.FromString,
                _registered_method=True)
        self.listAuthorizedResourceIds = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/listAuthorizedResourceIds',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.ListAuthorizedResourceIdsInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizedResourceIds.FromString,
                _registered_method=True)
        self.getByApiResourceKindAndResourceIdAndIdentityAccountId = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getByApiResourceKindAndResourceIdAndIdentityAccountId',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.GetIamPolicyByApiResourceKindAndResourceIdAndIdentityAccountIdInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IamPolicyByPrincipal.FromString,
                _registered_method=True)
        self.listAuthorizedUserIds = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/listAuthorizedUserIds',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.ListAuthorizedUserIdsInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizedUserIds.FromString,
                _registered_method=True)
        self.findMembersByOrg = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/findMembersByOrg',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.FindByOrgRequest.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.MemberWithRolesList.FromString,
                _registered_method=True)
        self.findMembersByEnv = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/findMembersByEnv',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.FindByEnvInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.MemberWithRolesList.FromString,
                _registered_method=True)
        self.getMembersCountByOrg = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getMembersCountByOrg',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.CountByOrgRequest.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.UsersCount.FromString,
                _registered_method=True)
        self.getMembersCountByEnv = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getMembersCountByEnv',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.CountByEnvInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.UsersCount.FromString,
                _registered_method=True)
        self.getTeamsCountByOrg = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getTeamsCountByOrg',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.CountByOrgRequest.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.UsersCount.FromString,
                _registered_method=True)
        self.findTeamsByOrg = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/findTeamsByOrg',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.FindByOrgRequest.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.TeamWithRolesList.FromString,
                _registered_method=True)
        self.findTeamsByEnv = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/findTeamsByEnv',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.FindByEnvInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.TeamWithRolesList.FromString,
                _registered_method=True)
        self.getTeamsCountByEnv = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getTeamsCountByEnv',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.CountByEnvInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.UsersCount.FromString,
                _registered_method=True)
        self.listObjectIdsByRole = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/listObjectIdsByRole',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.ListObjectIdsByRoleInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizedResourceIds.FromString,
                _registered_method=True)
        self.listSharedObjectIdsByRole = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/listSharedObjectIdsByRole',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.ListObjectIdsByRoleInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizedResourceIds.FromString,
                _registered_method=True)


class IamPolicyQueryControllerServicer(object):
    """iam policy query controller
    """

    def getByApiResourceKindAndResourceId(self, request, context):
        """retrieve iam policies by type and id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getByApiResourceKindAndResourceIdGroupByRole(self, request, context):
        """retrieve iam policies by type and id grouped by role
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getEnvironmentByApiResourceKindAndResourceIdGroupByRole(self, request, context):
        """retrieve iam policies by type and id grouped by role
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkAuthorization(self, request, context):
        """checkAuthorization evaluates whether a specific action or access described by the AuthorizationInput
        is authorized based on the configured IAM policies. This RPC is crucial for enforcing access controls
        and ensuring that operations are performed by appropriately authorized users or services.

        The authorization decision is returned as an IsAuthorized message, indicating a binary outcome
        (true if the action is authorized, false otherwise). Custom options are used to define the required
        permission (iam_policy_get) and the error message to be returned if the authorization check fails
        due to insufficient permissions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listAuthorizedResourceIds(self, request, context):
        """listResources evaluates the provided AuthorizationInput to identify resources that the requesting
        entity is authorized to access, based on IAM policies. This operation is essential for scenarios
        where an entity needs to enumerate resources they have permissions to interact with.

        It returns an AuthorizedResourceIds message, which contains the IDs of all resources the entity is
        authorized to access. Similar to checkAuthorization, this RPC utilizes custom options to specify the
        required permission (iam_policy_get) and the error message for insufficient permissions scenarios.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getByApiResourceKindAndResourceIdAndIdentityAccountId(self, request, context):
        """retrieve iam policy by api resource king, id and principal id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listAuthorizedUserIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findMembersByOrg(self, request, context):
        """retrieve paginated list of members of a organization.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findMembersByEnv(self, request, context):
        """retrieve paginated list of members of a environment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMembersCountByOrg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMembersCountByEnv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTeamsCountByOrg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findTeamsByOrg(self, request, context):
        """retrieve paginated list of members of a organization.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findTeamsByEnv(self, request, context):
        """retrieve paginated list of members of a environment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTeamsCountByEnv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listObjectIdsByRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listSharedObjectIdsByRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IamPolicyQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getByApiResourceKindAndResourceId': grpc.unary_unary_rpc_method_handler(
                    servicer.getByApiResourceKindAndResourceId,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.GetIamPolicyByApiResourceKindAndResourceIdInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IamPoliciesByPrincipal.SerializeToString,
            ),
            'getByApiResourceKindAndResourceIdGroupByRole': grpc.unary_unary_rpc_method_handler(
                    servicer.getByApiResourceKindAndResourceIdGroupByRole,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.GetIamPolicyByApiResourceKindAndResourceIdInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IamPoliciesByRole.SerializeToString,
            ),
            'getEnvironmentByApiResourceKindAndResourceIdGroupByRole': grpc.unary_unary_rpc_method_handler(
                    servicer.getEnvironmentByApiResourceKindAndResourceIdGroupByRole,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.GetIamPolicyByApiResourceKindAndResourceIdInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IamPoliciesByRole.SerializeToString,
            ),
            'checkAuthorization': grpc.unary_unary_rpc_method_handler(
                    servicer.checkAuthorization,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizationInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IsAuthorized.SerializeToString,
            ),
            'listAuthorizedResourceIds': grpc.unary_unary_rpc_method_handler(
                    servicer.listAuthorizedResourceIds,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.ListAuthorizedResourceIdsInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizedResourceIds.SerializeToString,
            ),
            'getByApiResourceKindAndResourceIdAndIdentityAccountId': grpc.unary_unary_rpc_method_handler(
                    servicer.getByApiResourceKindAndResourceIdAndIdentityAccountId,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.GetIamPolicyByApiResourceKindAndResourceIdAndIdentityAccountIdInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IamPolicyByPrincipal.SerializeToString,
            ),
            'listAuthorizedUserIds': grpc.unary_unary_rpc_method_handler(
                    servicer.listAuthorizedUserIds,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.ListAuthorizedUserIdsInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizedUserIds.SerializeToString,
            ),
            'findMembersByOrg': grpc.unary_unary_rpc_method_handler(
                    servicer.findMembersByOrg,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.FindByOrgRequest.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.MemberWithRolesList.SerializeToString,
            ),
            'findMembersByEnv': grpc.unary_unary_rpc_method_handler(
                    servicer.findMembersByEnv,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.FindByEnvInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.MemberWithRolesList.SerializeToString,
            ),
            'getMembersCountByOrg': grpc.unary_unary_rpc_method_handler(
                    servicer.getMembersCountByOrg,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.CountByOrgRequest.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.UsersCount.SerializeToString,
            ),
            'getMembersCountByEnv': grpc.unary_unary_rpc_method_handler(
                    servicer.getMembersCountByEnv,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.CountByEnvInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.UsersCount.SerializeToString,
            ),
            'getTeamsCountByOrg': grpc.unary_unary_rpc_method_handler(
                    servicer.getTeamsCountByOrg,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.CountByOrgRequest.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.UsersCount.SerializeToString,
            ),
            'findTeamsByOrg': grpc.unary_unary_rpc_method_handler(
                    servicer.findTeamsByOrg,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.FindByOrgRequest.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.TeamWithRolesList.SerializeToString,
            ),
            'findTeamsByEnv': grpc.unary_unary_rpc_method_handler(
                    servicer.findTeamsByEnv,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.FindByEnvInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.TeamWithRolesList.SerializeToString,
            ),
            'getTeamsCountByEnv': grpc.unary_unary_rpc_method_handler(
                    servicer.getTeamsCountByEnv,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.CountByEnvInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.UsersCount.SerializeToString,
            ),
            'listObjectIdsByRole': grpc.unary_unary_rpc_method_handler(
                    servicer.listObjectIdsByRole,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.ListObjectIdsByRoleInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizedResourceIds.SerializeToString,
            ),
            'listSharedObjectIdsByRole': grpc.unary_unary_rpc_method_handler(
                    servicer.listSharedObjectIdsByRole,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.ListObjectIdsByRoleInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizedResourceIds.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IamPolicyQueryController(object):
    """iam policy query controller
    """

    @staticmethod
    def getByApiResourceKindAndResourceId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getByApiResourceKindAndResourceId',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.GetIamPolicyByApiResourceKindAndResourceIdInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IamPoliciesByPrincipal.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getByApiResourceKindAndResourceIdGroupByRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getByApiResourceKindAndResourceIdGroupByRole',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.GetIamPolicyByApiResourceKindAndResourceIdInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IamPoliciesByRole.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getEnvironmentByApiResourceKindAndResourceIdGroupByRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getEnvironmentByApiResourceKindAndResourceIdGroupByRole',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.GetIamPolicyByApiResourceKindAndResourceIdInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IamPoliciesByRole.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def checkAuthorization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/checkAuthorization',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizationInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IsAuthorized.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listAuthorizedResourceIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/listAuthorizedResourceIds',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.ListAuthorizedResourceIdsInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizedResourceIds.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getByApiResourceKindAndResourceIdAndIdentityAccountId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getByApiResourceKindAndResourceIdAndIdentityAccountId',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.GetIamPolicyByApiResourceKindAndResourceIdAndIdentityAccountIdInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.IamPolicyByPrincipal.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listAuthorizedUserIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/listAuthorizedUserIds',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.ListAuthorizedUserIdsInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizedUserIds.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def findMembersByOrg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/findMembersByOrg',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.FindByOrgRequest.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.MemberWithRolesList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def findMembersByEnv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/findMembersByEnv',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.FindByEnvInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.MemberWithRolesList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMembersCountByOrg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getMembersCountByOrg',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.CountByOrgRequest.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.UsersCount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMembersCountByEnv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getMembersCountByEnv',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.CountByEnvInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.UsersCount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTeamsCountByOrg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getTeamsCountByOrg',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.CountByOrgRequest.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.UsersCount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def findTeamsByOrg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/findTeamsByOrg',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.FindByOrgRequest.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.TeamWithRolesList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def findTeamsByEnv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/findTeamsByEnv',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.FindByEnvInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.TeamWithRolesList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTeamsCountByEnv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/getTeamsCountByEnv',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.CountByEnvInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.UsersCount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listObjectIdsByRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/listObjectIdsByRole',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.ListObjectIdsByRoleInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizedResourceIds.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listSharedObjectIdsByRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v1.IamPolicyQueryController/listSharedObjectIdsByRole',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.ListObjectIdsByRoleInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v1_dot_io__pb2.AuthorizedResourceIds.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
