# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.commons.apiresource import io_pb2 as cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_io__pb2
from cloud.planton.apis.iam.iampolicy.v2 import api_pb2 as cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2
from cloud.planton.apis.iam.iampolicy.v2 import io_pb2 as cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2
from cloud.planton.apis.iam.iampolicy.v2 import spec_pb2 as cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_spec__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class IamPolicyV2CommandControllerStub(object):
    """IAM Policy V2 Command Controller

    This service manages the lifecycle of IAM policies in Planton Cloud.
    IAM policies define access control rules by connecting three key elements:
    - Principal: WHO gets access (user, team, environment, etc.)
    - Resource: WHAT is being accessed (any API resource)
    - Relation: HOW they can access it (viewer, admin, user, etc.)

    Under the hood, each IAM policy creates an OpenFGA tuple that enforces
    the permission in Planton Cloud's authorization system.

    Common Use Cases:
    - Granting users access to organizations or projects
    - Sharing provider credentials with environments
    - Setting up team-based access control
    - Managing fine-grained permissions on any resource
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/create',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_spec__pb2.IamPolicySpec.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
                _registered_method=True)
        self.createBulk = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/createBulk',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPolicySpecList.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.FromString,
                _registered_method=True)
        self.upsert = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/upsert',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.UpsertIamPoliciesInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.FromString,
                _registered_method=True)
        self.delete = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/delete',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_spec__pb2.IamPolicySpec.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
                _registered_method=True)
        self.deleteBulk = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/deleteBulk',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPolicySpecList.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.FromString,
                _registered_method=True)
        self.shareWithEnvironment = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/shareWithEnvironment',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.EnvironmentAccessInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
                _registered_method=True)
        self.unshareWithEnvironment = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/unshareWithEnvironment',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.EnvironmentAccessInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
                _registered_method=True)
        self.grantOwnership = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/grantOwnership',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.PrincipalResourceInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
                _registered_method=True)
        self.grantMemberAccess = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/grantMemberAccess',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.ResourcePrincipalsInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.FromString,
                _registered_method=True)
        self.registerWithPlatform = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/registerWithPlatform',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_spec__pb2.ApiResourceRef.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
                _registered_method=True)
        self.grantPlatformPermission = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/grantPlatformPermission',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.GrantPlatformPermissionInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
                _registered_method=True)
        self.revokeOrgAccess = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/revokeOrgAccess',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.RevokeOrgAccessInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.FromString,
                _registered_method=True)
        self.cleanupResourcePolicies = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/cleanupResourcePolicies',
                request_serializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_io__pb2.ApiResourceId.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.migrateFromV1 = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/migrateFromV1',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.createFromUserInvitation = channel.unary_unary(
                '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/createFromUserInvitation',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.CreateIamPoliciesFromUserInvitationInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.FromString,
                _registered_method=True)


class IamPolicyV2CommandControllerServicer(object):
    """IAM Policy V2 Command Controller

    This service manages the lifecycle of IAM policies in Planton Cloud.
    IAM policies define access control rules by connecting three key elements:
    - Principal: WHO gets access (user, team, environment, etc.)
    - Resource: WHAT is being accessed (any API resource)
    - Relation: HOW they can access it (viewer, admin, user, etc.)

    Under the hood, each IAM policy creates an OpenFGA tuple that enforces
    the permission in Planton Cloud's authorization system.

    Common Use Cases:
    - Granting users access to organizations or projects
    - Sharing provider credentials with environments
    - Setting up team-based access control
    - Managing fine-grained permissions on any resource
    """

    def create(self, request, context):
        """Create a new IAM policy

        Creates a single IAM policy that grants a principal access to a resource with a specific relation.
        This is the fundamental operation for establishing permissions in Planton Cloud.

        The operation:
        1. Validates the input (principal, resource, relation are all valid)
        2. Checks for duplicates (skips if the exact policy already exists, idempotent)
        3. Creates the policy in the database with auto-generated ID and metadata
        4. Writes the corresponding tuple to OpenFGA (where authorization is enforced)

        Authorization:
        - Caller must have 'iam_policy_update' permission on the RESOURCE being shared
        - This ensures only resource owners/admins can grant access to their resources

        Example:
        Input:
        principal: {kind: "identity_account", id: "ia-alice-123"}
        resource: {kind: "aws_credential", id: "cred-prod-456"}
        relation: "viewer"
        Result:
        Created IamPolicy with auto-generated ID (e.g., "iamp-01HQ...")
        Alice can view (but not modify) the AWS credential

        Input: IamPolicySpec containing principal, resource, and relation
        Output: The created IamPolicy with generated ID and metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createBulk(self, request, context):
        """Create multiple IAM policies in a single operation

        This is a bulk creation operation that efficiently creates multiple IAM policies at once.
        Each policy in the input list grants a principal access to a resource with a specific relation.

        The operation:
        1. Validates all inputs (principals, resources, relations are all valid)
        2. Checks for duplicates (skips policies that already exist, continues with others)
        3. Creates all new policies in the database with auto-generated IDs and metadata
        4. Writes the corresponding tuples to OpenFGA in a single batch

        This is more efficient than calling `create` multiple times:
        - Single batch write to OpenFGA (faster)
        - Reduced network overhead
        - Atomic operation at OpenFGA level

        Authorization:
        - Caller must have 'iam_policy_update' permission on ALL resources being shared
        - If authorization fails for any resource, the entire operation fails

        Use Cases:
        - Grant a user multiple roles at once on a resource
        - Share multiple resources with an environment
        - Set up initial permissions for a new organization
        - Bulk permission grants during onboarding

        Example:
        Input specs:
        - {principal: {kind: "identity_account", id: "ia-alice-123"}, resource: {kind: "aws_credential", id: "cred-prod-456"}, relation: "viewer"}
        - {principal: {kind: "identity_account", id: "ia-alice-123"}, resource: {kind: "vpc", id: "vpc-prod-789"}, relation: "admin"}
        - {principal: {kind: "identity_account", id: "ia-bob-456"}, resource: {kind: "vpc", id: "vpc-prod-789"}, relation: "viewer"}
        Result: Three policies created in one batch operation, each with auto-generated ID

        Input: IamPolicySpecList containing list of policy specs to create
        Output: IamPoliciesList containing all successfully created policies with generated IDs and metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upsert(self, request, context):
        """Upsert (synchronize) IAM policies for a principal-resource combination

        This is a powerful sync operation that ensures a principal has EXACTLY the specified
        relations on a resource - no more, no less. It intelligently adds, removes, and keeps
        policies to match the desired state.

        The operation:
        1. Queries all existing policies for the principal-resource pair
        2. Compares with the desired relations list
        3. Creates policies for new relations (not currently present)
        4. Deletes policies for removed relations (present but not in the list)
        5. Keeps policies for unchanged relations (present and still in the list)

        This is idempotent - calling it multiple times with the same input has the same effect.

        Authorization:
        - Caller must have 'iam_policy_update' permission on the RESOURCE

        Example Scenario:
        Current state: john@example.com has ["admin", "viewer"] on vpc-prod-123
        Upsert input: john@example.com should have ["admin", "editor"] on vpc-prod-123
        Result:
        - "admin" policy: KEPT (was there, still needed)
        - "viewer" policy: DELETED (was there, no longer needed)
        - "editor" policy: CREATED (wasn't there, now needed)
        Final state: john@example.com has ["admin", "editor"] on vpc-prod-123

        Input: UpsertIamPoliciesInput with principal, resource, and desired relations list
        Output: IamPoliciesList containing all policies that now exist (after sync)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Delete a single IAM policy by spec

        Removes an existing IAM policy by matching the principal, resource, and relation.
        This is a surgical operation - it removes one specific policy without affecting others.

        The operation:
        1. Finds the policy by matching principal+resource+relation
        2. Removes it from the database
        3. Deletes the corresponding tuple from OpenFGA
        4. If no matching policy exists, the operation is idempotent (no error)

        Authorization:
        - Caller must have 'iam_policy_update' permission on the RESOURCE referenced in the policy

        Use Cases:
        - Revoking a specific permission from a user
        - Removing access after a team member leaves
        - Cleaning up individual policies

        Example:
        Input:
        principal: {kind: "identity_account", id: "ia-alice-123"}
        resource: {kind: "aws_credential", id: "cred-prod-456"}
        relation: "viewer"
        Result: The policy granting Alice viewer access to the credential is deleted

        Input: IamPolicySpec identifying the policy to delete (principal, resource, relation)
        Output: The deleted IamPolicy object (for audit/confirmation purposes)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteBulk(self, request, context):
        """Delete multiple IAM policies in a single operation

        Bulk deletion of IAM policies by their specs. This is more efficient than calling
        delete multiple times and is useful for cleanup operations.

        The operation:
        1. Finds all policies matching the specs (by principal+resource+relation)
        2. Removes all matching policies from the database
        3. Deletes all corresponding tuples from OpenFGA in a single batch
        4. If a spec doesn't match any policy, it's skipped (idempotent)

        The operation is atomic at the OpenFGA level (single write request) but
        individual database deletions. If authorization fails for any resource,
        the entire operation fails.

        Authorization:
        - Caller must have 'iam_policy_update' permission on ALL resources referenced
        in the policies being deleted

        Use Cases:
        - Bulk revocation when removing a user from an organization
        - Cleaning up policies when decommissioning an environment
        - Mass removal of temporary access grants
        - Revoke multiple specific permissions in one operation

        Example:
        Input specs:
        - {principal: {kind: "identity_account", id: "ia-alice-123"}, resource: {kind: "vpc", id: "vpc-prod-789"}, relation: "admin"}
        - {principal: {kind: "identity_account", id: "ia-alice-123"}, resource: {kind: "vpc", id: "vpc-prod-789"}, relation: "viewer"}
        Result: Both policies deleted in one batch operation

        Input: IamPolicySpecList containing list of policy specs to delete
        Output: IamPoliciesList containing all deleted policies (for audit purposes)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def shareWithEnvironment(self, request, context):
        """Share a resource with an environment

        This is a specialized operation for sharing resources with environments.
        It's commonly used to make credentials, secrets, and other resources available
        to workloads running in specific environments.

        The operation:
        1. Validates the environment exists and caller has access
        2. Creates an IAM policy with:
        - Principal = the environment (identified by environment_id)
        - Resource = the resource being shared (from input)
        - Relation = "shared" (hardcoded standard sharing relation)
        3. If the policy already exists, the operation is idempotent (no error)
        4. Creates both database record and OpenFGA tuple

        Authorization:
        - Caller must have 'iam_policy_update' permission on the RESOURCE being shared
        - This ensures only resource owners can share their resources with environments

        Common Use Cases:
        - Share AWS credentials with production environment
        → Workloads in prod environment can deploy to AWS
        - Share database secrets with staging environment
        → Apps in staging can connect to staging database
        - Share Kubernetes credentials with multiple environments
        → Enables multi-environment deployments

        Example:
        Input:
        environment_id: "env-prod-abc123"
        resource: {kind: "aws_credential", id: "cred-prod-456"}
        Result:
        One policy created:
        environment:env-prod-abc123 → shared → aws_credential:cred-prod-456

        Input: EnvironmentAccessInput with environment ID and resource
        Output: IamPolicy - the created sharing policy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unshareWithEnvironment(self, request, context):
        """Unshare a resource from an environment

        This operation revokes an environment's access to a previously shared resource.
        It's used to remove sharing relationships when resources should no longer be
        accessible to specific environments.

        The operation:
        1. Validates the environment exists and caller has access
        2. Finds the IAM policy with:
        - Principal = the environment (identified by environment_id)
        - Resource = the resource being unshared (from input)
        - Relation = "shared" (hardcoded standard sharing relation)
        3. Deletes the policy from the database
        4. Removes the corresponding tuple from OpenFGA
        5. If the policy doesn't exist, the operation is idempotent (no error)

        Authorization:
        - Caller must have 'iam_policy_update' permission on the RESOURCE being unshared
        - This ensures only resource owners can revoke access to their resources

        Common Use Cases:
        - Revoke AWS credentials access when environment is decommissioned
        → Environment can no longer deploy to AWS
        - Remove secret access when environment no longer needs it
        → Improves security by limiting access scope
        - Unshare credentials when moving to different provider
        → Clean up obsolete sharing relationships

        Example:
        Input:
        environment_id: "env-staging-xyz789"
        resource: {kind: "aws_credential", id: "cred-prod-456"}
        Result:
        Policy deleted:
        environment:env-staging-xyz789 → shared → aws_credential:cred-prod-456
        Effect:
        Staging environment can no longer access the AWS credential

        Input: EnvironmentAccessInput with environment ID and resource
        Output: IamPolicy - the deleted sharing policy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def grantOwnership(self, request, context):
        """Grant ownership of a resource to a principal

        This operation establishes an ownership relationship between a principal and a resource.
        Ownership is the foundational permission in Planton Cloud - owners have complete control
        over their resources and can delegate access to others.

        This RPC is typically called by platform services when resources are created, but can
        also be used to transfer ownership or establish ownership chains.

        The operation:
        1. Validates both the principal and resource exist
        2. Creates an IAM policy with:
        - Principal = from input (WHO becomes the owner)
        - Resource = from input (WHAT is being owned)
        - Relation = "owner" (hardcoded)
        3. If ownership already exists, the operation is idempotent (no error)
        4. Creates both database record and OpenFGA tuple

        Authorization:
        - Caller must have 'iam_policy_update' permission on the RESOURCE
        - OR caller must be a platform operator for system-initiated ownership

        Ownership Chains:
        Planton Cloud uses hierarchical ownership:
        - Platform owns Organizations
        - Organizations own Projects/Environments
        - Projects own Infrastructure Resources

        This enables permissions to flow down the hierarchy via OpenFGA's relationship model.

        Common Use Cases:
        - Assign user as owner when they create an organization
        → user:alice@example.com owns organization:acme-corp
        - Set organization as owner of a new project
        → organization:acme-corp owns project:web-app
        - Establish environment ownership
        → project:web-app owns environment:production

        Example:
        Input:
        principal: {kind: "identity_account", id: "usr-alice-123"}
        resource: {kind: "organization", id: "org-acme-456"}
        Result:
        Policy created:
        identity_account:usr-alice-123 → owner → organization:org-acme-456
        Effect:
        Alice becomes the owner of the Acme organization and has full control

        Input: PrincipalResourceInput with principal and resource
        Output: IamPolicy - the created ownership policy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def grantMemberAccess(self, request, context):
        """Grant member access to multiple principals on a resource

        This operation makes multiple principals members of a resource in a single call.
        It works across different resource and principal types, enabling efficient bulk membership management.

        The operation:
        1. Validates the resource exists
        2. Validates all principals exist
        3. Creates an IAM policy for each principal with:
        - Principal = from input (each WHO becomes a member)
        - Resource = from input (WHAT they're members of)
        - Relation = "member" (hardcoded)
        4. If a membership already exists for any principal, that operation is idempotent (no error)
        5. Creates both database records and OpenFGA tuples for all policies

        Authorization:
        - Caller must have 'iam_policy_update' permission on the RESOURCE

        Common Use Cases:
        - Add multiple users as members of a team
        → identity_account:usr-alice-123, identity_account:usr-bob-456 → member → team:engineering
        - Make multiple identity accounts members of a project
        → identity_account:usr-alice-123, identity_account:usr-charlie-789 → member → project:web-app
        - Grant bulk membership to any resource supporting the "member" relation

        Note: This is different from `shareWithEnvironment`:
        - `grantMemberAccess`: Generic, any principal/resource, "member" relation
        - `shareWithEnvironment`: Environment-specific, "shared" relation

        Example:
        Input:
        resource: {kind: "team", id: "team-platform-012"}
        principals: [
        {kind: "identity_account", id: "usr-alice-123"},
        {kind: "identity_account", id: "usr-bob-456"},
        {kind: "identity_account", id: "usr-charlie-789"}
        ]
        Result:
        Policies created:
        - identity_account:usr-alice-123 → member → team:team-platform-012
        - identity_account:usr-bob-456 → member → team:team-platform-012
        - identity_account:usr-charlie-789 → member → team:team-platform-012
        Effect:
        Alice, Bob, and Charlie all become members of the platform team

        Input: ResourcePrincipalsInput with multiple principals and single resource
        Output: IamPoliciesList - list of all created membership policies
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerWithPlatform(self, request, context):
        """Register a resource with the Planton Cloud platform

        This is a system-level operation used by platform services to register resources
        (like organizations and identity accounts) with the platform itself. These resources
        don't have traditional owners, so platform registration establishes the governance relationship.

        Platform registration creates a special relationship that:
        - Grants platform operators visibility into the resource
        - Enables platform-level governance and operations
        - Allows cross-organizational features to function
        - Supports platform-wide search and discovery

        This is NOT a user-facing operation - it's called internally by platform services
        during resource provisioning and onboarding.

        The operation:
        1. Creates an IAM policy with:
        - Principal = "platform:planton_cloud" (hardcoded)
        - Resource = from input (the resource being registered)
        - Relation = "platform" (hardcoded)
        2. If platform registration already exists, the operation is idempotent
        3. Creates both database record and OpenFGA tuple

        Authorization:
        - Requires platform operator permissions (resource_kind = platform, permission = operator)
        - This is a highly privileged operation restricted to platform services
        - Regular users cannot call this RPC

        Common Use Cases (Internal Platform Operations):
        - Register new organization with platform during onboarding
        → platform:planton_cloud → platform → organization:new-org
        - Establish platform governance over identity accounts
        → platform:planton_cloud → platform → identity_account:usr-new-123
        - Enable platform-wide search and discovery
        → Platform operators can see all registered resources

        Example:
        Input:
        resource: {kind: "organization", id: "org-acme-789"}
        Result:
        Policy created:
        platform:planton_cloud → platform → organization:org-acme-789
        Effect:
        The organization is now registered with the Planton Cloud platform,
        enabling platform-level operations and governance

        Input: ApiResourceRef - the resource to register with platform
        Output: IamPolicy - the created platform registration policy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def grantPlatformPermission(self, request, context):
        """Grant platform-level permission to a user

        This operation grants super admin platform-level permissions to users.
        Platform permissions provide elevated access across the entire platform.

        Supported Relations:
        - "operator": Platform operator with elevated privileges across all resources
        - "back_office_admin": Back-office administrator with platform-wide access

        The operation:
        1. Validates the principal exists (must be identity_account or team)
        2. Validates the relation is valid platform permission
        3. Creates an IAM policy with:
        - Principal = from input (WHO gets platform access)
        - Resource = "platform:planton_cloud" (hardcoded)
        - Relation = from input ("operator" or "back_office_admin")
        4. If permission already exists, the operation is idempotent
        5. Creates both database record and OpenFGA tuple

        Authorization:
        - Requires platform operator permissions
        - This is a highly privileged operation

        Common Use Cases:
        - Grant platform operator access to SRE team member
        → identity_account:usr-sre-123 → operator → platform:planton_cloud
        - Grant back-office admin access to support team
        → identity_account:usr-support-456 → back_office_admin → platform:planton_cloud

        Example:
        Input:
        principal: {kind: "identity_account", id: "usr-admin-789"}
        relation: "operator"
        Result:
        Policy created:
        identity_account:usr-admin-789 → operator → platform:planton_cloud
        Effect:
        User becomes a platform operator with super admin access

        Input: GrantPlatformPermissionInput with principal and relation
        Output: IamPolicy - the created platform permission policy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def revokeOrgAccess(self, request, context):
        """Revoke all access a user has to an organization

        This operation completely removes a user from an organization by deleting ALL IAM policies
        where the user is the principal and the organization is the resource. This is a nuclear
        option that revokes every permission and role the user had on the organization.

        Common scenarios for using this RPC:
        - Team member leaves the organization → complete cleanup of their access
        - Contractor engagement ends → remove all their organization permissions
        - User transfers to different organization → revoke access to old org
        - Security incident response → immediately revoke all access for compromised account
        - Offboarding automation → part of user removal workflow

        The operation:
        1. Queries ALL IAM policies where:
        - Principal = identity_account:<identity_account_id>
        - Resource = organization:<organization_id>
        (Any relation - admin, viewer, iam_admin, etc.)
        2. Deletes all matching policies from database
        3. Removes all corresponding tuples from OpenFGA in a single batch
        4. If no policies exist, the operation succeeds silently (idempotent)

        Impact:
        After this operation completes, the user will have ZERO access to:
        - The organization itself
        - Any projects, environments, or resources owned by the organization
        - Any inherited permissions through the organization hierarchy

        The user effectively becomes an outsider to the organization and cannot
        view, modify, or interact with any of its resources.

        Authorization:
        - Caller must have 'iam_policy_update' permission on the ORGANIZATION
        - Typically only organization admins can revoke access
        - This prevents non-admins from removing other users

        Example:
        Input:
        identity_account_id: "usr-bob-123"
        organization_id: "org-acme-456"
        Current State:
        Bob has policies:
        - identity_account:usr-bob-123 → admin → organization:org-acme-456
        - identity_account:usr-bob-123 → viewer → organization:org-acme-456
        Result:
        Both policies deleted
        Effect:
        Bob can no longer access the Acme organization or any of its resources

        Input: RevokeOrgAccessInput with user ID and organization ID
        Output: IamPoliciesList containing all revoked policies (for audit/confirmation)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cleanupResourcePolicies(self, request, context):
        """Clean up all IAM policies associated with a deleted resource

        This is a system-level cleanup operation invoked by platform services immediately
        after a resource has been deleted. It ensures complete removal of all IAM policy
        references to prevent orphaned data and maintain database integrity.

        The cleanup is comprehensive and bidirectional:
        1. Removes policies WHERE resource is the object (policies granting access TO this resource)
        Example: Policies giving users access to a deleted organization
        2. Removes policies WHERE resource is the principal (policies where this resource has access)
        Example: Policies where a deleted environment had access to credentials

        This operation:
        1. Queries ALL policies where the resource appears (as principal OR resource field)
        2. Deletes all matching policies from the database
        3. Removes all corresponding tuples from OpenFGA in a single batch
        4. Returns empty response (no return value needed)
        5. Is idempotent - safe to call multiple times or when no policies exist

        Authorization:
        - Requires platform operator permissions (resource_kind = platform, permission = operator)
        - This is a highly privileged system operation
        - Only platform services should call this RPC
        - Regular users cannot invoke this operation

        Integration Points:
        This RPC should be called as part of every resource deletion workflow:
        - After deleting an organization → cleanup all org-related policies
        - After deleting a user → cleanup all user access grants
        - After deleting an environment → cleanup all environment sharing
        - After deleting ANY resource → cleanup ensures no dangling references

        Common Use Cases (Internal Platform Operations):
        - Organization deleted
        → Remove policies granting users access to the org
        → Remove policies where org owns projects
        → Remove platform membership policy

        - User deleted
        → Remove policies granting user access to resources
        → Remove ownership policies where user owns resources
        → Remove team membership policies

        - Environment deleted
        → Remove policies sharing credentials with environment
        → Remove ownership policy from parent project

        Example:
        Input:
        resource: {kind: "organization", id: "org-acme-123"}
        Current State:
        Multiple policies exist:
        - user:alice → admin → organization:org-acme-123
        - user:bob → viewer → organization:org-acme-123
        - organization:org-acme-123 → owner → project:web-app
        - platform:planton_cloud → platform → organization:org-acme-123
        Result:
        ALL four policies deleted from database and OpenFGA
        Effect:
        Complete cleanup - no orphaned policy references remain

        Input: cloud.planton.apis.commons.apiresource.ApiResourceId - the deleted resource ID
        Output: google.protobuf.Empty (no return value)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def migrateFromV1(self, request, context):
        """Migrate existing IAM policies from v1 (FGA tuples) to v2 format

        This is a one-time migration operation that converts legacy IAM policy data
        stored as FGA tuples into the new v2 IamPolicy format with proper database records.

        Migration Process:
        1. Queries all existing FGA tuples from OpenFGA
        2. For each tuple, creates a corresponding v2 IamPolicy record in the database:
        - Extracts principal from tuple.user
        - Extracts resource from tuple.object
        - Extracts relation from tuple.relation
        - Generates new IAM policy ID
        - Creates metadata (creation time, creator, etc.)
        3. Skips tuples that already have corresponding v2 policies (idempotent)
        4. Maintains the FGA tuples (doesn't delete them, just creates DB records)

        Why This Migration is Needed:
        In v1, IAM policies existed ONLY as FGA tuples in OpenFGA with no database records.
        In v2, IAM policies have:
        - Database records (for querying, auditing, metadata)
        - FGA tuples (for authorization enforcement)

        This migration bridges the gap by creating database records for existing tuples.

        Authorization:
        - Requires platform operator permissions (resource_kind = platform, permission = operator)
        - This is a highly privileged one-time operation
        - Only platform operators can trigger this migration
        - Should be called during system upgrade from v1 to v2

        Idempotency:
        The operation is safe to call multiple times:
        - Already migrated tuples are skipped (checked by matching principal+resource+relation)
        - New tuples since last run will be migrated
        - No data loss or duplication

        Use Cases:
        - Initial migration when upgrading from IAM policy v1 to v2
        - Catch-up migration if some tuples were missed
        - Re-running after failed partial migration

        Example Migration:
        FGA Tuple (v1):
        user: "identity_account:usr-alice-123"
        relation: "admin"
        object: "organization:org-acme-456"

        Converts to IamPolicy (v2):
        metadata.id: "iamp-generated-uuid"
        metadata.created_at: <current timestamp>
        spec.principal: {kind: "identity_account", id: "usr-alice-123"}
        spec.resource: {kind: "organization", id: "org-acme-456"}
        spec.relation: "admin"

        Important Notes:
        - This is a READ operation from OpenFGA (doesn't modify tuples)
        - This is a WRITE operation to database (creates new IamPolicy records)
        - The FGA tuples remain unchanged (they're still the source of truth for authorization)
        - After migration, new policies will maintain both DB records and FGA tuples

        Input: google.protobuf.Empty (no parameters needed, migrates all tuples)
        Output: google.protobuf.Empty (fire-and-forget operation)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createFromUserInvitation(self, request, context):
        """Create IAM policies from user invitation acceptance

        This operation creates IAM policies for a user when they accept an organization invitation.
        It grants the invited user the specified IAM roles on the organization.

        The operation:
        1. Validates the principal (invited user) exists
        2. Creates IAM policies granting the principal the specified roles on the organization
        3. Writes all tuples to OpenFGA in a single batch

        Authorization:
        - This is an internal operation called by user invitation acceptance flow
        - Caller must have platform operator permissions (system operation)

        Use Cases:
        - User accepts invitation to join organization → grant them specified roles

        Example:
        Input:
        principal: {kind: "identity_account", id: "ia-alice-123"}
        organization_id: "org-acme-456"
        relations: ["admin", "viewer"]
        Result:
        Policies created:
        - identity_account:ia-alice-123 → admin → organization:org-acme-456
        - identity_account:ia-alice-123 → viewer → organization:org-acme-456

        Input: CreateIamPoliciesFromUserInvitationInput with principal, organization, and role IDs
        Output: IamPoliciesList containing all created policies
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IamPolicyV2CommandControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_spec__pb2.IamPolicySpec.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.SerializeToString,
            ),
            'createBulk': grpc.unary_unary_rpc_method_handler(
                    servicer.createBulk,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPolicySpecList.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.SerializeToString,
            ),
            'upsert': grpc.unary_unary_rpc_method_handler(
                    servicer.upsert,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.UpsertIamPoliciesInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_spec__pb2.IamPolicySpec.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.SerializeToString,
            ),
            'deleteBulk': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteBulk,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPolicySpecList.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.SerializeToString,
            ),
            'shareWithEnvironment': grpc.unary_unary_rpc_method_handler(
                    servicer.shareWithEnvironment,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.EnvironmentAccessInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.SerializeToString,
            ),
            'unshareWithEnvironment': grpc.unary_unary_rpc_method_handler(
                    servicer.unshareWithEnvironment,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.EnvironmentAccessInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.SerializeToString,
            ),
            'grantOwnership': grpc.unary_unary_rpc_method_handler(
                    servicer.grantOwnership,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.PrincipalResourceInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.SerializeToString,
            ),
            'grantMemberAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.grantMemberAccess,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.ResourcePrincipalsInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.SerializeToString,
            ),
            'registerWithPlatform': grpc.unary_unary_rpc_method_handler(
                    servicer.registerWithPlatform,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_spec__pb2.ApiResourceRef.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.SerializeToString,
            ),
            'grantPlatformPermission': grpc.unary_unary_rpc_method_handler(
                    servicer.grantPlatformPermission,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.GrantPlatformPermissionInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.SerializeToString,
            ),
            'revokeOrgAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.revokeOrgAccess,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.RevokeOrgAccessInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.SerializeToString,
            ),
            'cleanupResourcePolicies': grpc.unary_unary_rpc_method_handler(
                    servicer.cleanupResourcePolicies,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_io__pb2.ApiResourceId.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'migrateFromV1': grpc.unary_unary_rpc_method_handler(
                    servicer.migrateFromV1,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'createFromUserInvitation': grpc.unary_unary_rpc_method_handler(
                    servicer.createFromUserInvitation,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.CreateIamPoliciesFromUserInvitationInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IamPolicyV2CommandController(object):
    """IAM Policy V2 Command Controller

    This service manages the lifecycle of IAM policies in Planton Cloud.
    IAM policies define access control rules by connecting three key elements:
    - Principal: WHO gets access (user, team, environment, etc.)
    - Resource: WHAT is being accessed (any API resource)
    - Relation: HOW they can access it (viewer, admin, user, etc.)

    Under the hood, each IAM policy creates an OpenFGA tuple that enforces
    the permission in Planton Cloud's authorization system.

    Common Use Cases:
    - Granting users access to organizations or projects
    - Sharing provider credentials with environments
    - Setting up team-based access control
    - Managing fine-grained permissions on any resource
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/create',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_spec__pb2.IamPolicySpec.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createBulk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/createBulk',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPolicySpecList.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def upsert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/upsert',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.UpsertIamPoliciesInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/delete',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_spec__pb2.IamPolicySpec.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteBulk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/deleteBulk',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPolicySpecList.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def shareWithEnvironment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/shareWithEnvironment',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.EnvironmentAccessInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def unshareWithEnvironment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/unshareWithEnvironment',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.EnvironmentAccessInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def grantOwnership(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/grantOwnership',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.PrincipalResourceInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def grantMemberAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/grantMemberAccess',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.ResourcePrincipalsInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def registerWithPlatform(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/registerWithPlatform',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_spec__pb2.ApiResourceRef.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def grantPlatformPermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/grantPlatformPermission',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.GrantPlatformPermissionInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_api__pb2.IamPolicy.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def revokeOrgAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/revokeOrgAccess',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.RevokeOrgAccessInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def cleanupResourcePolicies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/cleanupResourcePolicies',
            cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_io__pb2.ApiResourceId.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def migrateFromV1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/migrateFromV1',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createFromUserInvitation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.iampolicy.v2.IamPolicyV2CommandController/createFromUserInvitation',
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.CreateIamPoliciesFromUserInvitationInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_iampolicy_dot_v2_dot_io__pb2.IamPoliciesList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
