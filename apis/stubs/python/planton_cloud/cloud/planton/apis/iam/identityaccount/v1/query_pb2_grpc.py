# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.commons.apiresource import find_pb2 as cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_find__pb2
from cloud.planton.apis.commons.apiresource import status_pb2 as cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_status__pb2
from cloud.planton.apis.iam.identityaccount.v1 import api_pb2 as cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2
from cloud.planton.apis.iam.identityaccount.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2
from cloud.planton.apis.iam.identityaccount.v1 import user_invitation_pb2 as cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2


class IdentityAccountQueryControllerStub(object):
    """identity-account query controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get = channel.unary_unary(
                '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/get',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.FromString,
                _registered_method=True)
        self.whoAmI = channel.unary_unary(
                '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/whoAmI',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.FromString,
                _registered_method=True)
        self.getByEmail = channel.unary_unary(
                '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/getByEmail',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountEmail.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.FromString,
                _registered_method=True)
        self.getByIdpId = channel.unary_unary(
                '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/getByIdpId',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdpId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.FromString,
                _registered_method=True)
        self.getByGithubUsername = channel.unary_unary(
                '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/getByGithubUsername',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.GithubUsername.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.FromString,
                _registered_method=True)
        self.isBackOfficeUser = channel.unary_unary(
                '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/isBackOfficeUser',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
                _registered_method=True)
        self.find = channel.unary_unary(
                '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/find',
                request_serializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_find__pb2.FindApiResourcesRequest.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountsList.FromString,
                _registered_method=True)
        self.getActorInfo = channel.unary_unary(
                '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/getActorInfo',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_status__pb2.ApiResourceAuditActor.FromString,
                _registered_method=True)


class IdentityAccountQueryControllerServicer(object):
    """identity-account query controller
    """

    def get(self, request, context):
        """lookup identity-account.
        either the caller should be the owner of the account or should be a platform-operator.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def whoAmI(self, request, context):
        """look up identity-account by authentication token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getByEmail(self, request, context):
        """lookup user-account by identity account email.
        either the caller should be the owner of the account or should be a platform-operator.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getByIdpId(self, request, context):
        """lookup user-account by idp id.
        either the caller should be the owner of the account or should be a platform-operator.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getByGithubUsername(self, request, context):
        """lookup user-account by github-username.
        either the caller should be the owner of the account or should be a platform-operator.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isBackOfficeUser(self, request, context):
        """this is to check if a user is authorized to login to back office or not
        like other queries this rpc does not return any data
        instead it tries to check the authorization based on config given below
        if rpc returns authorization error then the user is not supposed to login to backoffice
        otherwise if rpc returns boolean response then the user is allowed to login to backoffice.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def find(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getActorInfo(self, request, context):
        """lookup identity-account actor-info (lightweight actor data for audit trail caching)

        This RPC is specifically designed to break circular dependency loops in audit actor resolution.
        When converting IdentityAccount entities to proto responses, the audit info (created_by, updated_by)
        needs actor details. If we use the standard get() RPC, it triggers a full entity-to-proto conversion
        including audit actors, which can create infinite recursion if audit actors reference IdentityAccounts.

        This dedicated endpoint:
        - Returns ONLY the lightweight ApiResourceAuditActor (id + avatar)
        - Does NOT include full audit trail in the response
        - Accesses entity data directly without recursive proto conversion
        - Is used by ApiResourceAuditActorCacheProxy to safely populate Redis cache
        - Prevents StackOverflowError when Redis cache is empty or cleared

        Restricted to platform operators only as this is an internal cache-population mechanism.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IdentityAccountQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.SerializeToString,
            ),
            'whoAmI': grpc.unary_unary_rpc_method_handler(
                    servicer.whoAmI,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.SerializeToString,
            ),
            'getByEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.getByEmail,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountEmail.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.SerializeToString,
            ),
            'getByIdpId': grpc.unary_unary_rpc_method_handler(
                    servicer.getByIdpId,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdpId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.SerializeToString,
            ),
            'getByGithubUsername': grpc.unary_unary_rpc_method_handler(
                    servicer.getByGithubUsername,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.GithubUsername.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.SerializeToString,
            ),
            'isBackOfficeUser': grpc.unary_unary_rpc_method_handler(
                    servicer.isBackOfficeUser,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
            ),
            'find': grpc.unary_unary_rpc_method_handler(
                    servicer.find,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_find__pb2.FindApiResourcesRequest.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountsList.SerializeToString,
            ),
            'getActorInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getActorInfo,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_status__pb2.ApiResourceAuditActor.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IdentityAccountQueryController(object):
    """identity-account query controller
    """

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/get',
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def whoAmI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/whoAmI',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getByEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/getByEmail',
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountEmail.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getByIdpId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/getByIdpId',
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdpId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getByGithubUsername(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/getByGithubUsername',
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.GithubUsername.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_api__pb2.IdentityAccount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isBackOfficeUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/isBackOfficeUser',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/find',
            cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_find__pb2.FindApiResourcesRequest.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountsList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getActorInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.identityaccount.v1.IdentityAccountQueryController/getActorInfo',
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_status__pb2.ApiResourceAuditActor.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class UserInvitationQueryControllerStub(object):
    """user-invitation query controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.findByOrgByStatus = channel.unary_unary(
                '/cloud.planton.apis.iam.identityaccount.v1.UserInvitationQueryController/findByOrgByStatus',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.FindUserInvitationsByOrgByStatusInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.UserInvitations.FromString,
                _registered_method=True)
        self.findByToken = channel.unary_unary(
                '/cloud.planton.apis.iam.identityaccount.v1.UserInvitationQueryController/findByToken',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.FindUserInvitationByTokenInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.UserInvitation.FromString,
                _registered_method=True)
        self.findByEmail = channel.unary_unary(
                '/cloud.planton.apis.iam.identityaccount.v1.UserInvitationQueryController/findByEmail',
                request_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountEmail.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.UserInvitations.FromString,
                _registered_method=True)


class UserInvitationQueryControllerServicer(object):
    """user-invitation query controller
    """

    def findByOrgByStatus(self, request, context):
        """rpc to find user-invitations by org and by status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findByToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findByEmail(self, request, context):
        """lookup a user-invitations using email.
        there may be more than one user-invitations with the same email for different organizations.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserInvitationQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'findByOrgByStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.findByOrgByStatus,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.FindUserInvitationsByOrgByStatusInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.UserInvitations.SerializeToString,
            ),
            'findByToken': grpc.unary_unary_rpc_method_handler(
                    servicer.findByToken,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.FindUserInvitationByTokenInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.UserInvitation.SerializeToString,
            ),
            'findByEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.findByEmail,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountEmail.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.UserInvitations.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.iam.identityaccount.v1.UserInvitationQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.iam.identityaccount.v1.UserInvitationQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserInvitationQueryController(object):
    """user-invitation query controller
    """

    @staticmethod
    def findByOrgByStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.identityaccount.v1.UserInvitationQueryController/findByOrgByStatus',
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.FindUserInvitationsByOrgByStatusInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.UserInvitations.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def findByToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.identityaccount.v1.UserInvitationQueryController/findByToken',
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.FindUserInvitationByTokenInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.UserInvitation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def findByEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.iam.identityaccount.v1.UserInvitationQueryController/findByEmail',
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_io__pb2.IdentityAccountEmail.SerializeToString,
            cloud_dot_planton_dot_apis_dot_iam_dot_identityaccount_dot_v1_dot_user__invitation__pb2.UserInvitations.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
