# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.integration.kubernetes.kubernetesobject import io_pb2 as cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_kubernetesobject_dot_io__pb2
from cloud.planton.apis.kubeops.v1.podexec import io_pb2 as cloud_dot_planton_dot_apis_dot_kubeops_dot_v1_dot_podexec_dot_io__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class CloudResourceKubernetesPodExecControllerStub(object):
    """---------------------------------------------------------------------------
    Bi-directional-streaming controller
    ---------------------------------------------------------------------------
    Implemented *manually* because RequestRouter does not support bi-di streams.
    Only one RPC lives here so the generated router can safely skip the service
    entirely without needing method-level exclusions.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.execIntoPodContainer = channel.stream_stream(
                '/cloud.planton.apis.kubeops.v1.podexec.CloudResourceKubernetesPodExecController/execIntoPodContainer',
                request_serializer=cloud_dot_planton_dot_apis_dot_kubeops_dot_v1_dot_podexec_dot_io__pb2.ExecIntoPodContainerInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_kubernetesobject_dot_io__pb2.ExecIntoPodContainerResponse.FromString,
                _registered_method=True)


class CloudResourceKubernetesPodExecControllerServicer(object):
    """---------------------------------------------------------------------------
    Bi-directional-streaming controller
    ---------------------------------------------------------------------------
    Implemented *manually* because RequestRouter does not support bi-di streams.
    Only one RPC lives here so the generated router can safely skip the service
    entirely without needing method-level exclusions.

    """

    def execIntoPodContainer(self, request_iterator, context):
        """Mimics `kubectl exec` for an interactive shell inside a container.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CloudResourceKubernetesPodExecControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'execIntoPodContainer': grpc.stream_stream_rpc_method_handler(
                    servicer.execIntoPodContainer,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_kubeops_dot_v1_dot_podexec_dot_io__pb2.ExecIntoPodContainerInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_kubernetesobject_dot_io__pb2.ExecIntoPodContainerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.kubeops.v1.podexec.CloudResourceKubernetesPodExecController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.kubeops.v1.podexec.CloudResourceKubernetesPodExecController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CloudResourceKubernetesPodExecController(object):
    """---------------------------------------------------------------------------
    Bi-directional-streaming controller
    ---------------------------------------------------------------------------
    Implemented *manually* because RequestRouter does not support bi-di streams.
    Only one RPC lives here so the generated router can safely skip the service
    entirely without needing method-level exclusions.

    """

    @staticmethod
    def execIntoPodContainer(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/cloud.planton.apis.kubeops.v1.podexec.CloudResourceKubernetesPodExecController/execIntoPodContainer',
            cloud_dot_planton_dot_apis_dot_kubeops_dot_v1_dot_podexec_dot_io__pb2.ExecIntoPodContainerInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_integration_dot_kubernetes_dot_kubernetesobject_dot_io__pb2.ExecIntoPodContainerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CloudResourceKubernetesPodExecBrowserControllerStub(object):
    """---------------------------------------------------------------------------
    Browser-friendly controller (unary / server-streaming only)
    ---------------------------------------------------------------------------
    All RPCs here can be safely delegated by the generated router class.  The
    split avoids duplicate-service registration errors and keeps the proto
    model explicit about transport semantics.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.browserExecIntoPodContainer = channel.unary_stream(
                '/cloud.planton.apis.kubeops.v1.podexec.CloudResourceKubernetesPodExecBrowserController/browserExecIntoPodContainer',
                request_serializer=cloud_dot_planton_dot_apis_dot_kubeops_dot_v1_dot_podexec_dot_io__pb2.ExecIntoPodContainerInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_kubeops_dot_v1_dot_podexec_dot_io__pb2.BrowserExecIntoPodContainerResponse.FromString,
                _registered_method=True)
        self.browserExecuteNextCommandInPodContainer = channel.unary_unary(
                '/cloud.planton.apis.kubeops.v1.podexec.CloudResourceKubernetesPodExecBrowserController/browserExecuteNextCommandInPodContainer',
                request_serializer=cloud_dot_planton_dot_apis_dot_kubeops_dot_v1_dot_podexec_dot_io__pb2.BrowserExecuteNextCommandInPodContainerInput.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class CloudResourceKubernetesPodExecBrowserControllerServicer(object):
    """---------------------------------------------------------------------------
    Browser-friendly controller (unary / server-streaming only)
    ---------------------------------------------------------------------------
    All RPCs here can be safely delegated by the generated router class.  The
    split avoids duplicate-service registration errors and keeps the proto
    model explicit about transport semantics.

    """

    def browserExecIntoPodContainer(self, request, context):
        """*
        One-way server stream that relays stdout/stderr from the container to the
        browser.  Input is unary because browsers cannot open true bi-di streams.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def browserExecuteNextCommandInPodContainer(self, request, context):
        """*
        Send the next interactive command to the running shell session.
        This replaces the client-to-server direction of the bi-di stream.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CloudResourceKubernetesPodExecBrowserControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'browserExecIntoPodContainer': grpc.unary_stream_rpc_method_handler(
                    servicer.browserExecIntoPodContainer,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_kubeops_dot_v1_dot_podexec_dot_io__pb2.ExecIntoPodContainerInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_kubeops_dot_v1_dot_podexec_dot_io__pb2.BrowserExecIntoPodContainerResponse.SerializeToString,
            ),
            'browserExecuteNextCommandInPodContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.browserExecuteNextCommandInPodContainer,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_kubeops_dot_v1_dot_podexec_dot_io__pb2.BrowserExecuteNextCommandInPodContainerInput.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.kubeops.v1.podexec.CloudResourceKubernetesPodExecBrowserController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.kubeops.v1.podexec.CloudResourceKubernetesPodExecBrowserController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CloudResourceKubernetesPodExecBrowserController(object):
    """---------------------------------------------------------------------------
    Browser-friendly controller (unary / server-streaming only)
    ---------------------------------------------------------------------------
    All RPCs here can be safely delegated by the generated router class.  The
    split avoids duplicate-service registration errors and keeps the proto
    model explicit about transport semantics.

    """

    @staticmethod
    def browserExecIntoPodContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/cloud.planton.apis.kubeops.v1.podexec.CloudResourceKubernetesPodExecBrowserController/browserExecIntoPodContainer',
            cloud_dot_planton_dot_apis_dot_kubeops_dot_v1_dot_podexec_dot_io__pb2.ExecIntoPodContainerInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_kubeops_dot_v1_dot_podexec_dot_io__pb2.BrowserExecIntoPodContainerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def browserExecuteNextCommandInPodContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.kubeops.v1.podexec.CloudResourceKubernetesPodExecBrowserController/browserExecuteNextCommandInPodContainer',
            cloud_dot_planton_dot_apis_dot_kubeops_dot_v1_dot_podexec_dot_io__pb2.BrowserExecuteNextCommandInPodContainerInput.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
