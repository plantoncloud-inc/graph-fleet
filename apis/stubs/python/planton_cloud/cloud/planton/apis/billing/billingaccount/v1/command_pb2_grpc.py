# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.billing.billingaccount.v1 import api_pb2 as cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2
from cloud.planton.apis.billing.billingaccount.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2
from cloud.planton.apis.billing.billingaccount.v1 import payment_method_pb2 as cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2
from cloud.planton.apis.billing.billingaccount.v1 import usage_reporting_pb2 as cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2
from cloud.planton.apis.commons.apiresource import io_pb2 as cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_io__pb2
from cloud.planton.apis.commons.protobuf import custom_pb2 as cloud_dot_planton_dot_apis_dot_commons_dot_protobuf_dot_custom__pb2
from cloud.planton.apis.resourcemanager.organization.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class BillingAccountCommandControllerStub(object):
    """billing_account command controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/create',
                request_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
                _registered_method=True)
        self.update = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/update',
                request_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
                _registered_method=True)
        self.delete = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/delete',
                request_serializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_io__pb2.ApiResourceId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
                _registered_method=True)
        self.subscribe = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/subscribe',
                request_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2.SubscriptionInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
                _registered_method=True)
        self.initiateBillingPortalSession = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/initiateBillingPortalSession',
                request_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2.BillingPortalSessionUrl.FromString,
                _registered_method=True)
        self.cancel = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/cancel',
                request_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
                _registered_method=True)
        self.syncAllSubscriptions = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/syncAllSubscriptions',
                request_serializer=cloud_dot_planton_dot_apis_dot_commons_dot_protobuf_dot_custom__pb2.CustomEmpty.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_commons_dot_protobuf_dot_custom__pb2.CustomEmpty.FromString,
                _registered_method=True)
        self.syncSubscriptionByOrg = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/syncSubscriptionByOrg',
                request_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
                _registered_method=True)


class BillingAccountCommandControllerServicer(object):
    """billing_account command controller
    """

    def create(self, request, context):
        """create billing account for an organization using organization id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """update an existing billing_account on planton-cloud
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """delete an existing billing_account on planton-cloud using billing_account id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribe(self, request, context):
        """subscribe to plan.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def initiateBillingPortalSession(self, request, context):
        """initiateBillingPortalSession is the RPC that requests a session URL for the
        billing portal associated with the given OrganizationId. Authorized users
        can use this URL to access and manage billing details.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancel(self, request, context):
        """Cancels the organization’s current billing plan.
        • Sets the Stripe subscription to end at the end of the current period.
        • Persists the updated BillingAccount in the platform database.
        • Publishes an `updated` event so observers see the change.
        Returns the updated BillingAccount state after cancellation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def syncAllSubscriptions(self, request, context):
        """Synchronises Stripe subscription state with the platform’s billing database.
        Invoked by a platform owner or backend engineer whenever:
        • a webhook delivery failed or was missed,
        • manual changes were made directly in Stripe, or
        • a periodic reconciliation is desired.
        The call is fire-and-forget: it accepts and returns `CustomEmpty` because
        the server handles the entire sync operation internally.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def syncSubscriptionByOrg(self, request, context):
        """Immediately refreshes the organization’s billing state from Stripe and returns
        the updated BillingAccount. Typical use: after a user fixes payment in Stripe
        and is redirected back to the application, this RPC fetches the latest
        subscription status (e.g., payment_succeeded, resumed), updates the platform
        database, and returns the new BillingAccount so the UI can unlock access
        without waiting for the periodic sync.
        Behavior:
        • Reads Stripe subscription and customer payment method status for the org.
        • Maps Stripe state into BillingAccount fields (status, trial, next period, etc.).
        • Persists the updated BillingAccount to the platform DB.
        • Returns the updated BillingAccount.
        Authorization: caller must be permitted to update the given organization.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BillingAccountCommandControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_io__pb2.ApiResourceId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.SerializeToString,
            ),
            'subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribe,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2.SubscriptionInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.SerializeToString,
            ),
            'initiateBillingPortalSession': grpc.unary_unary_rpc_method_handler(
                    servicer.initiateBillingPortalSession,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2.BillingPortalSessionUrl.SerializeToString,
            ),
            'cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.cancel,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.SerializeToString,
            ),
            'syncAllSubscriptions': grpc.unary_unary_rpc_method_handler(
                    servicer.syncAllSubscriptions,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_commons_dot_protobuf_dot_custom__pb2.CustomEmpty.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_commons_dot_protobuf_dot_custom__pb2.CustomEmpty.SerializeToString,
            ),
            'syncSubscriptionByOrg': grpc.unary_unary_rpc_method_handler(
                    servicer.syncSubscriptionByOrg,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BillingAccountCommandController(object):
    """billing_account command controller
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/create',
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/update',
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/delete',
            cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_io__pb2.ApiResourceId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/subscribe',
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2.SubscriptionInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def initiateBillingPortalSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/initiateBillingPortalSession',
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2.BillingPortalSessionUrl.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/cancel',
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def syncAllSubscriptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/syncAllSubscriptions',
            cloud_dot_planton_dot_apis_dot_commons_dot_protobuf_dot_custom__pb2.CustomEmpty.SerializeToString,
            cloud_dot_planton_dot_apis_dot_commons_dot_protobuf_dot_custom__pb2.CustomEmpty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def syncSubscriptionByOrg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountCommandController/syncSubscriptionByOrg',
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PaymentMethodCommandControllerStub(object):
    """PaymentMethodCommandController provides write (command) operations related to
    managing payment methods in the billing system. For example, this can be used
    to create or update a payment method for a given organization.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.initiateCheckoutSession = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.PaymentMethodCommandController/initiateCheckoutSession',
                request_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2.InitiateCheckoutSessionInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2.CheckoutUrl.FromString,
                _registered_method=True)
        self.setDefault = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.PaymentMethodCommandController/setDefault',
                request_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2.CheckoutSessionId.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class PaymentMethodCommandControllerServicer(object):
    """PaymentMethodCommandController provides write (command) operations related to
    managing payment methods in the billing system. For example, this can be used
    to create or update a payment method for a given organization.
    """

    def initiateCheckoutSession(self, request, context):
        """Creates a Stripe Checkout Session in "setup" mode so the user can add a payment method
        (e.g., a credit card) without an immediate charge. Once the setup completes,
        Stripe attaches the new payment method to the customer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setDefault(self, request, context):
        """updatePaymentMethodToDefault sets the payment method added during a specific Stripe Checkout session
        as the default payment method for an organization’s Stripe customer. This ensures that all future
        charges (subscriptions, invoices) use the newly added card (or other payment method) by default.

        Usage:
        1. The user adds a new payment method via a Stripe Checkout session in setup mode.
        2. After the session is completed, the front-end extracts the 'session_id' from the success URL.
        3. The front-end calls this RPC with the Checkout Session ID to retrieve the associated payment method
        and set it as the default for the organization’s Stripe customer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentMethodCommandControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'initiateCheckoutSession': grpc.unary_unary_rpc_method_handler(
                    servicer.initiateCheckoutSession,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2.InitiateCheckoutSessionInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2.CheckoutUrl.SerializeToString,
            ),
            'setDefault': grpc.unary_unary_rpc_method_handler(
                    servicer.setDefault,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2.CheckoutSessionId.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.billing.billingaccount.v1.PaymentMethodCommandController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.billing.billingaccount.v1.PaymentMethodCommandController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PaymentMethodCommandController(object):
    """PaymentMethodCommandController provides write (command) operations related to
    managing payment methods in the billing system. For example, this can be used
    to create or update a payment method for a given organization.
    """

    @staticmethod
    def initiateCheckoutSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.PaymentMethodCommandController/initiateCheckoutSession',
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2.InitiateCheckoutSessionInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2.CheckoutUrl.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setDefault(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.PaymentMethodCommandController/setDefault',
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2.CheckoutSessionId.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class UsageReportingCommandControllerStub(object):
    """Command controller for syncing automation-runner job records to billing data and reporting usage
    data (automation runner minutes and seat counts) to Stripe. These operations are
    usually invoked by a scheduled cron job but can also be triggered manually with
    optional parameters.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.reportAutomationRunnerUsage = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.UsageReportingCommandController/reportAutomationRunnerUsage',
                request_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.ReportAutomationRunnerUsageInput.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.reportSeatUsage = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.UsageReportingCommandController/reportSeatUsage',
                request_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.ReportSeatUsageInput.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.syncAutomationRunnerJobs = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.UsageReportingCommandController/syncAutomationRunnerJobs',
                request_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.SyncAutomationRunnerJobsInput.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class UsageReportingCommandControllerServicer(object):
    """Command controller for syncing automation-runner job records to billing data and reporting usage
    data (automation runner minutes and seat counts) to Stripe. These operations are
    usually invoked by a scheduled cron job but can also be triggered manually with
    optional parameters.
    """

    def reportAutomationRunnerUsage(self, request, context):
        """Reports the total automation-runner usage (in minutes) for the specified
        organization and time range to Stripe. When parameters are omitted, usage for
        all organizations during their current billing period is reported.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reportSeatUsage(self, request, context):
        """Reports the number of active seats for one or more organizations to Stripe.
        If no parameters are provided, seat counts for all organizations are reported
        for the current billing period.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def syncAutomationRunnerJobs(self, request, context):
        """Syncs automation-runner job execution records into the billing database for the
        specified organization and time range. If parameters are omitted, the system
        uses the organization's current billing period as the default window. This RPC
        only persists raw job data; it does not call Stripe directly.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsageReportingCommandControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'reportAutomationRunnerUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.reportAutomationRunnerUsage,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.ReportAutomationRunnerUsageInput.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'reportSeatUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.reportSeatUsage,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.ReportSeatUsageInput.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'syncAutomationRunnerJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.syncAutomationRunnerJobs,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.SyncAutomationRunnerJobsInput.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.billing.billingaccount.v1.UsageReportingCommandController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.billing.billingaccount.v1.UsageReportingCommandController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UsageReportingCommandController(object):
    """Command controller for syncing automation-runner job records to billing data and reporting usage
    data (automation runner minutes and seat counts) to Stripe. These operations are
    usually invoked by a scheduled cron job but can also be triggered manually with
    optional parameters.
    """

    @staticmethod
    def reportAutomationRunnerUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.UsageReportingCommandController/reportAutomationRunnerUsage',
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.ReportAutomationRunnerUsageInput.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def reportSeatUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.UsageReportingCommandController/reportSeatUsage',
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.ReportSeatUsageInput.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def syncAutomationRunnerJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.UsageReportingCommandController/syncAutomationRunnerJobs',
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.SyncAutomationRunnerJobsInput.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
