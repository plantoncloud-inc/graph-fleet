# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.billing.billingaccount.v1 import api_pb2 as cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2
from cloud.planton.apis.billing.billingaccount.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2
from cloud.planton.apis.billing.billingaccount.v1 import payment_method_pb2 as cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2
from cloud.planton.apis.billing.billingaccount.v1 import usage_reporting_pb2 as cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2
from cloud.planton.apis.resourcemanager.organization.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2


class BillingAccountQueryControllerStub(object):
    """BillingAccountQueryController provides read-only operations to retrieve and
    evaluate billing accounts linked to organizations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getByOrg = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountQueryController/getByOrg',
                request_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
                _registered_method=True)
        self.getBillingNotification = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountQueryController/getBillingNotification',
                request_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2.BillingNotification.FromString,
                _registered_method=True)
        self.checkBilling = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountQueryController/checkBilling',
                request_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2.CheckBillingStatusResponse.FromString,
                _registered_method=True)


class BillingAccountQueryControllerServicer(object):
    """BillingAccountQueryController provides read-only operations to retrieve and
    evaluate billing accounts linked to organizations.
    """

    def getByOrg(self, request, context):
        """Retrieves the billing account associated with a given organization ID.
        This allows users (with appropriate permissions) to view the account's
        Stripe-related identifiers and current plan details.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBillingNotification(self, request, context):
        """The `getBillingNotification` RPC provides a billing-related notification message.
        It is typically used to inform the user of any plan or billing information that
        needs their attention, such as upgrade prompts or other payment reminders.
        Parameters:
        OrganizationId - The organization identifier for which the billing notification
        should be retrieved.
        Returns:
        BillingNotification - A message containing billing-related details or warnings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkBilling(self, request, context):
        """checkBilling checks whether the billing status for the given organization
        is valid enough to allow certain functionalities. This ensures that any
        operations dependent on billing status proceed only if billing is in
        a valid state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BillingAccountQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getByOrg': grpc.unary_unary_rpc_method_handler(
                    servicer.getByOrg,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.SerializeToString,
            ),
            'getBillingNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.getBillingNotification,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2.BillingNotification.SerializeToString,
            ),
            'checkBilling': grpc.unary_unary_rpc_method_handler(
                    servicer.checkBilling,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2.CheckBillingStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.billing.billingaccount.v1.BillingAccountQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.billing.billingaccount.v1.BillingAccountQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BillingAccountQueryController(object):
    """BillingAccountQueryController provides read-only operations to retrieve and
    evaluate billing accounts linked to organizations.
    """

    @staticmethod
    def getByOrg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountQueryController/getByOrg',
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_api__pb2.BillingAccount.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getBillingNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountQueryController/getBillingNotification',
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2.BillingNotification.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def checkBilling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.BillingAccountQueryController/checkBilling',
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_io__pb2.CheckBillingStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PaymentMethodQueryControllerStub(object):
    """PaymentMethodQueryController provides read-only operations to retrieve and
    evaluate payment methods accounts linked to organizations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.checkDefault = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.PaymentMethodQueryController/checkDefault',
                request_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2.IsDefaultPaymentMethodExists.FromString,
                _registered_method=True)


class PaymentMethodQueryControllerServicer(object):
    """PaymentMethodQueryController provides read-only operations to retrieve and
    evaluate payment methods accounts linked to organizations.
    """

    def checkDefault(self, request, context):
        """checkDefault verifies if the Stripe customer associated with the given organization
        currently has a default payment method on file. If not, the client can prompt the user to add one.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentMethodQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'checkDefault': grpc.unary_unary_rpc_method_handler(
                    servicer.checkDefault,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2.IsDefaultPaymentMethodExists.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.billing.billingaccount.v1.PaymentMethodQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.billing.billingaccount.v1.PaymentMethodQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PaymentMethodQueryController(object):
    """PaymentMethodQueryController provides read-only operations to retrieve and
    evaluate payment methods accounts linked to organizations.
    """

    @staticmethod
    def checkDefault(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.PaymentMethodQueryController/checkDefault',
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_payment__method__pb2.IsDefaultPaymentMethodExists.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class UsageReportingQueryControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getDeploymentMinutesCurrentAndPreviousMonthByContext = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.UsageReportingQueryController/getDeploymentMinutesCurrentAndPreviousMonthByContext',
                request_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.GetDeploymentMinutesByContextInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.UsageMinutesCurrentAndPreviousMonth.FromString,
                _registered_method=True)
        self.getBuildMinutesCurrentAndPreviousMonthByContext = channel.unary_unary(
                '/cloud.planton.apis.billing.billingaccount.v1.UsageReportingQueryController/getBuildMinutesCurrentAndPreviousMonthByContext',
                request_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.UsageMinutesCurrentAndPreviousMonth.FromString,
                _registered_method=True)


class UsageReportingQueryControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getDeploymentMinutesCurrentAndPreviousMonthByContext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBuildMinutesCurrentAndPreviousMonthByContext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsageReportingQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getDeploymentMinutesCurrentAndPreviousMonthByContext': grpc.unary_unary_rpc_method_handler(
                    servicer.getDeploymentMinutesCurrentAndPreviousMonthByContext,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.GetDeploymentMinutesByContextInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.UsageMinutesCurrentAndPreviousMonth.SerializeToString,
            ),
            'getBuildMinutesCurrentAndPreviousMonthByContext': grpc.unary_unary_rpc_method_handler(
                    servicer.getBuildMinutesCurrentAndPreviousMonthByContext,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.UsageMinutesCurrentAndPreviousMonth.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.billing.billingaccount.v1.UsageReportingQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.billing.billingaccount.v1.UsageReportingQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UsageReportingQueryController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getDeploymentMinutesCurrentAndPreviousMonthByContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.UsageReportingQueryController/getDeploymentMinutesCurrentAndPreviousMonthByContext',
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.GetDeploymentMinutesByContextInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.UsageMinutesCurrentAndPreviousMonth.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getBuildMinutesCurrentAndPreviousMonthByContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.billing.billingaccount.v1.UsageReportingQueryController/getBuildMinutesCurrentAndPreviousMonthByContext',
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_billing_dot_billingaccount_dot_v1_dot_usage__reporting__pb2.UsageMinutesCurrentAndPreviousMonth.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
