# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.commons.apiresource import find_pb2 as cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_find__pb2
from cloud.planton.apis.resourcemanager.environment.v1 import api_pb2 as cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_api__pb2
from cloud.planton.apis.resourcemanager.environment.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_io__pb2
from cloud.planton.apis.resourcemanager.organization.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2


class EnvironmentQueryControllerStub(object):
    """environment query controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get = channel.unary_unary(
                '/cloud.planton.apis.resourcemanager.environment.v1.EnvironmentQueryController/get',
                request_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_io__pb2.EnvironmentId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_api__pb2.Environment.FromString,
                _registered_method=True)
        self.getByOrgBySlug = channel.unary_unary(
                '/cloud.planton.apis.resourcemanager.environment.v1.EnvironmentQueryController/getByOrgBySlug',
                request_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.ByOrgBySlugRequest.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_api__pb2.Environment.FromString,
                _registered_method=True)
        self.findByOrg = channel.unary_unary(
                '/cloud.planton.apis.resourcemanager.environment.v1.EnvironmentQueryController/findByOrg',
                request_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_io__pb2.Environments.FromString,
                _registered_method=True)
        self.find = channel.unary_unary(
                '/cloud.planton.apis.resourcemanager.environment.v1.EnvironmentQueryController/find',
                request_serializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_find__pb2.FindApiResourcesRequest.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_io__pb2.EnvironmentList.FromString,
                _registered_method=True)


class EnvironmentQueryControllerServicer(object):
    """environment query controller
    """

    def get(self, request, context):
        """look up environment using environment id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getByOrgBySlug(self, request, context):
        """look up environment using organization id and environment name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findByOrg(self, request, context):
        """look up list of environments using organization id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def find(self, request, context):
        """find environments with pagination and filtering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnvironmentQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_io__pb2.EnvironmentId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_api__pb2.Environment.SerializeToString,
            ),
            'getByOrgBySlug': grpc.unary_unary_rpc_method_handler(
                    servicer.getByOrgBySlug,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.ByOrgBySlugRequest.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_api__pb2.Environment.SerializeToString,
            ),
            'findByOrg': grpc.unary_unary_rpc_method_handler(
                    servicer.findByOrg,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_io__pb2.Environments.SerializeToString,
            ),
            'find': grpc.unary_unary_rpc_method_handler(
                    servicer.find,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_find__pb2.FindApiResourcesRequest.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_io__pb2.EnvironmentList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.resourcemanager.environment.v1.EnvironmentQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.resourcemanager.environment.v1.EnvironmentQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EnvironmentQueryController(object):
    """environment query controller
    """

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.resourcemanager.environment.v1.EnvironmentQueryController/get',
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_io__pb2.EnvironmentId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_api__pb2.Environment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getByOrgBySlug(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.resourcemanager.environment.v1.EnvironmentQueryController/getByOrgBySlug',
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.ByOrgBySlugRequest.SerializeToString,
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_api__pb2.Environment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def findByOrg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.resourcemanager.environment.v1.EnvironmentQueryController/findByOrg',
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_organization_dot_v1_dot_io__pb2.OrganizationId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_io__pb2.Environments.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.resourcemanager.environment.v1.EnvironmentQueryController/find',
            cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_find__pb2.FindApiResourcesRequest.SerializeToString,
            cloud_dot_planton_dot_apis_dot_resourcemanager_dot_environment_dot_v1_dot_io__pb2.EnvironmentList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
