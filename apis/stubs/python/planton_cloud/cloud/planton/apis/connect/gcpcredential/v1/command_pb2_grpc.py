# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.commons.apiresource import io_pb2 as cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_io__pb2
from cloud.planton.apis.connect.gcpcredential.v1 import api_pb2 as cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2


class GcpCredentialCommandControllerStub(object):
    """gcp-credential command controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.apply = channel.unary_unary(
                '/cloud.planton.apis.connect.gcpcredential.v1.GcpCredentialCommandController/apply',
                request_serializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.FromString,
                _registered_method=True)
        self.create = channel.unary_unary(
                '/cloud.planton.apis.connect.gcpcredential.v1.GcpCredentialCommandController/create',
                request_serializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.FromString,
                _registered_method=True)
        self.update = channel.unary_unary(
                '/cloud.planton.apis.connect.gcpcredential.v1.GcpCredentialCommandController/update',
                request_serializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.FromString,
                _registered_method=True)
        self.delete = channel.unary_unary(
                '/cloud.planton.apis.connect.gcpcredential.v1.GcpCredentialCommandController/delete',
                request_serializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_io__pb2.ApiResourceId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.FromString,
                _registered_method=True)


class GcpCredentialCommandControllerServicer(object):
    """gcp-credential command controller
    """

    def apply(self, request, context):
        """create/update a gcp-credential resource
        the authorization and state-operation are determined depending on whether the gcp-credential
        is going to be created or updated which is determined as part of the request execution.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
        """create a gcp-credential resource
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """update an existing gcp-credential
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """delete a gcp-credential that was previously created
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GcpCredentialCommandControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'apply': grpc.unary_unary_rpc_method_handler(
                    servicer.apply,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.SerializeToString,
            ),
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_io__pb2.ApiResourceId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.connect.gcpcredential.v1.GcpCredentialCommandController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.connect.gcpcredential.v1.GcpCredentialCommandController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GcpCredentialCommandController(object):
    """gcp-credential command controller
    """

    @staticmethod
    def apply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.connect.gcpcredential.v1.GcpCredentialCommandController/apply',
            cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.SerializeToString,
            cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.connect.gcpcredential.v1.GcpCredentialCommandController/create',
            cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.SerializeToString,
            cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.connect.gcpcredential.v1.GcpCredentialCommandController/update',
            cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.SerializeToString,
            cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.connect.gcpcredential.v1.GcpCredentialCommandController/delete',
            cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_io__pb2.ApiResourceId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_connect_dot_gcpcredential_dot_v1_dot_api__pb2.GcpCredential.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
