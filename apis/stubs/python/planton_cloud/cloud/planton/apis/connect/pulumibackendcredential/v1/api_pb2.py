# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: cloud/planton/apis/connect/pulumibackendcredential/v1/api.proto
# Protobuf Python Version: 6.31.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    31,
    1,
    '',
    'cloud/planton/apis/connect/pulumibackendcredential/v1/api.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from buf.validate import validate_pb2 as buf_dot_validate_dot_validate__pb2
from cloud.planton.apis.commons.apiresource import metadata_pb2 as cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_metadata__pb2
from cloud.planton.apis.commons.apiresource import status_pb2 as cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_status__pb2
from cloud.planton.apis.connect.pulumibackendcredential.v1 import spec_pb2 as cloud_dot_planton_dot_apis_dot_connect_dot_pulumibackendcredential_dot_v1_dot_spec__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n?cloud/planton/apis/connect/pulumibackendcredential/v1/api.proto\x12\x35\x63loud.planton.apis.connect.pulumibackendcredential.v1\x1a\x1b\x62uf/validate/validate.proto\x1a\x35\x63loud/planton/apis/commons/apiresource/metadata.proto\x1a\x33\x63loud/planton/apis/commons/apiresource/status.proto\x1a@cloud/planton/apis/connect/pulumibackendcredential/v1/spec.proto\"\xa5\x03\n\x17PulumiBackendCredential\x12=\n\x0b\x61pi_version\x18\x01 \x01(\tB\x1c\xbaH\x19r\x17\n\x15\x63onnect.planton.ai/v1R\napiVersion\x12\x32\n\x04kind\x18\x02 \x01(\tB\x1e\xbaH\x1br\x19\n\x17PulumiBackendCredentialR\x04kind\x12W\n\x08metadata\x18\x03 \x01(\x0b\x32;.cloud.planton.apis.commons.apiresource.ApiResourceMetadataR\x08metadata\x12\x66\n\x04spec\x18\x04 \x01(\x0b\x32R.cloud.planton.apis.connect.pulumibackendcredential.v1.PulumiBackendCredentialSpecR\x04spec\x12V\n\x06status\x18\x05 \x01(\x0b\x32>.cloud.planton.apis.commons.apiresource.ApiResourceAuditStatusR\x06statusB\xc0\x02\n9com.cloud.planton.apis.connect.pulumibackendcredential.v1B\x08\x41piProtoP\x01\xa2\x02\x05\x43PACP\xaa\x02\x35\x43loud.Planton.Apis.Connect.Pulumibackendcredential.V1\xca\x02\x35\x43loud\\Planton\\Apis\\Connect\\Pulumibackendcredential\\V1\xe2\x02\x41\x43loud\\Planton\\Apis\\Connect\\Pulumibackendcredential\\V1\\GPBMetadata\xea\x02:Cloud::Planton::Apis::Connect::Pulumibackendcredential::V1b\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'cloud.planton.apis.connect.pulumibackendcredential.v1.api_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n9com.cloud.planton.apis.connect.pulumibackendcredential.v1B\010ApiProtoP\001\242\002\005CPACP\252\0025Cloud.Planton.Apis.Connect.Pulumibackendcredential.V1\312\0025Cloud\\Planton\\Apis\\Connect\\Pulumibackendcredential\\V1\342\002ACloud\\Planton\\Apis\\Connect\\Pulumibackendcredential\\V1\\GPBMetadata\352\002:Cloud::Planton::Apis::Connect::Pulumibackendcredential::V1'
  _globals['_PULUMIBACKENDCREDENTIAL'].fields_by_name['api_version']._loaded_options = None
  _globals['_PULUMIBACKENDCREDENTIAL'].fields_by_name['api_version']._serialized_options = b'\272H\031r\027\n\025connect.planton.ai/v1'
  _globals['_PULUMIBACKENDCREDENTIAL'].fields_by_name['kind']._loaded_options = None
  _globals['_PULUMIBACKENDCREDENTIAL'].fields_by_name['kind']._serialized_options = b'\272H\033r\031\n\027PulumiBackendCredential'
  _globals['_PULUMIBACKENDCREDENTIAL']._serialized_start=326
  _globals['_PULUMIBACKENDCREDENTIAL']._serialized_end=747
# @@protoc_insertion_point(module_scope)
