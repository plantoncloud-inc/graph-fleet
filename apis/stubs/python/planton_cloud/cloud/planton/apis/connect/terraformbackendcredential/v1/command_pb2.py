# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: cloud/planton/apis/connect/terraformbackendcredential/v1/command.proto
# Protobuf Python Version: 6.31.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    31,
    1,
    '',
    'cloud/planton/apis/connect/terraformbackendcredential/v1/command.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from cloud.planton.apis.commons.apiresource import io_pb2 as cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_io__pb2
from cloud.planton.apis.commons.apiresource import rpc_service_options_pb2 as cloud_dot_planton_dot_apis_dot_commons_dot_apiresource_dot_rpc__service__options__pb2
from cloud.planton.apis.connect.terraformbackendcredential.v1 import api_pb2 as cloud_dot_planton_dot_apis_dot_connect_dot_terraformbackendcredential_dot_v1_dot_api__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\nFcloud/planton/apis/connect/terraformbackendcredential/v1/command.proto\x12\x38\x63loud.planton.apis.connect.terraformbackendcredential.v1\x1a/cloud/planton/apis/commons/apiresource/io.proto\x1a@cloud/planton/apis/commons/apiresource/rpc_service_options.proto\x1a\x42\x63loud/planton/apis/connect/terraformbackendcredential/v1/api.proto2\xef\x05\n+TerraformBackendCredentialCommandController\x12\xb3\x01\n\x05\x61pply\x12T.cloud.planton.apis.connect.terraformbackendcredential.v1.TerraformBackendCredential\x1aT.cloud.planton.apis.connect.terraformbackendcredential.v1.TerraformBackendCredential\x12\xb4\x01\n\x06\x63reate\x12T.cloud.planton.apis.connect.terraformbackendcredential.v1.TerraformBackendCredential\x1aT.cloud.planton.apis.connect.terraformbackendcredential.v1.TerraformBackendCredential\x12\xb4\x01\n\x06update\x12T.cloud.planton.apis.connect.terraformbackendcredential.v1.TerraformBackendCredential\x1aT.cloud.planton.apis.connect.terraformbackendcredential.v1.TerraformBackendCredential\x12\x95\x01\n\x06\x64\x65lete\x12\x35.cloud.planton.apis.commons.apiresource.ApiResourceId\x1aT.cloud.planton.apis.connect.terraformbackendcredential.v1.TerraformBackendCredential\x1a\x04\xa0\xff+lB\xd3\x02\n<com.cloud.planton.apis.connect.terraformbackendcredential.v1B\x0c\x43ommandProtoP\x01\xa2\x02\x05\x43PACT\xaa\x02\x38\x43loud.Planton.Apis.Connect.Terraformbackendcredential.V1\xca\x02\x38\x43loud\\Planton\\Apis\\Connect\\Terraformbackendcredential\\V1\xe2\x02\x44\x43loud\\Planton\\Apis\\Connect\\Terraformbackendcredential\\V1\\GPBMetadata\xea\x02=Cloud::Planton::Apis::Connect::Terraformbackendcredential::V1b\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'cloud.planton.apis.connect.terraformbackendcredential.v1.command_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n<com.cloud.planton.apis.connect.terraformbackendcredential.v1B\014CommandProtoP\001\242\002\005CPACT\252\0028Cloud.Planton.Apis.Connect.Terraformbackendcredential.V1\312\0028Cloud\\Planton\\Apis\\Connect\\Terraformbackendcredential\\V1\342\002DCloud\\Planton\\Apis\\Connect\\Terraformbackendcredential\\V1\\GPBMetadata\352\002=Cloud::Planton::Apis::Connect::Terraformbackendcredential::V1'
  _globals['_TERRAFORMBACKENDCREDENTIALCOMMANDCONTROLLER']._loaded_options = None
  _globals['_TERRAFORMBACKENDCREDENTIALCOMMANDCONTROLLER']._serialized_options = b'\240\377+l'
  _globals['_TERRAFORMBACKENDCREDENTIALCOMMANDCONTROLLER']._serialized_start=316
  _globals['_TERRAFORMBACKENDCREDENTIALCOMMANDCONTROLLER']._serialized_end=1067
# @@protoc_insertion_point(module_scope)
