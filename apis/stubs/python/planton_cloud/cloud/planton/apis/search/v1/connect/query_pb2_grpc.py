# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.search.v1.apiresource import io_pb2 as cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_apiresource_dot_io__pb2
from cloud.planton.apis.search.v1.connect import io_pb2 as cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_connect_dot_io__pb2


class ConnectSearchQueryControllerStub(object):
    """connect search query controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.searchCredentialApiResourcesByContext = channel.unary_unary(
                '/cloud.planton.apis.search.v1.connect.ConnectSearchQueryController/searchCredentialApiResourcesByContext',
                request_serializer=cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_connect_dot_io__pb2.SearchCredentialApiResourcesByContext.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_apiresource_dot_io__pb2.ApiResourceSearchRecordList.FromString,
                _registered_method=True)
        self.getCredentialsByEnv = channel.unary_unary(
                '/cloud.planton.apis.search.v1.connect.ConnectSearchQueryController/getCredentialsByEnv',
                request_serializer=cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_connect_dot_io__pb2.GetCredentialsByEnvInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_connect_dot_io__pb2.Credentials.FromString,
                _registered_method=True)


class ConnectSearchQueryControllerServicer(object):
    """connect search query controller
    """

    def searchCredentialApiResourcesByContext(self, request, context):
        """The `searchCredentialApiResourcesByContext` RPC service method enables clients to search
        api-resources of credential kind resources within a specified organization's context. This requires appropriate permissions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCredentialsByEnv(self, request, context):
        """The `getCredentialsByEnv` RPC service method enables clients to retrieve credentials
        associated with a specific environment identifier. This requires appropriate permissions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectSearchQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'searchCredentialApiResourcesByContext': grpc.unary_unary_rpc_method_handler(
                    servicer.searchCredentialApiResourcesByContext,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_connect_dot_io__pb2.SearchCredentialApiResourcesByContext.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_apiresource_dot_io__pb2.ApiResourceSearchRecordList.SerializeToString,
            ),
            'getCredentialsByEnv': grpc.unary_unary_rpc_method_handler(
                    servicer.getCredentialsByEnv,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_connect_dot_io__pb2.GetCredentialsByEnvInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_connect_dot_io__pb2.Credentials.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.search.v1.connect.ConnectSearchQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.search.v1.connect.ConnectSearchQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ConnectSearchQueryController(object):
    """connect search query controller
    """

    @staticmethod
    def searchCredentialApiResourcesByContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.search.v1.connect.ConnectSearchQueryController/searchCredentialApiResourcesByContext',
            cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_connect_dot_io__pb2.SearchCredentialApiResourcesByContext.SerializeToString,
            cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_apiresource_dot_io__pb2.ApiResourceSearchRecordList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getCredentialsByEnv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.search.v1.connect.ConnectSearchQueryController/getCredentialsByEnv',
            cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_connect_dot_io__pb2.GetCredentialsByEnvInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_search_dot_v1_dot_connect_dot_io__pb2.Credentials.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
