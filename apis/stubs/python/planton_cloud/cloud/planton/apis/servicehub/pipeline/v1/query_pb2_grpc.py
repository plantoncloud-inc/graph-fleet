# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.integration.tekton import log_pb2 as cloud_dot_planton_dot_apis_dot_integration_dot_tekton_dot_log__pb2
from cloud.planton.apis.servicehub.pipeline.v1 import api_pb2 as cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_api__pb2
from cloud.planton.apis.servicehub.pipeline.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2
from cloud.planton.apis.servicehub.service.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_servicehub_dot_service_dot_v1_dot_io__pb2


class PipelineQueryControllerStub(object):
    """pipeline query controller
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get = channel.unary_unary(
                '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/get',
                request_serializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.PipelineId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_api__pb2.Pipeline.FromString,
                _registered_method=True)
        self.getStatusStream = channel.unary_stream(
                '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/getStatusStream',
                request_serializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.PipelineId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_api__pb2.PipelineStatus.FromString,
                _registered_method=True)
        self.getLogStream = channel.unary_stream(
                '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/getLogStream',
                request_serializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.PipelineId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_integration_dot_tekton_dot_log__pb2.TektonTaskLogEntry.FromString,
                _registered_method=True)
        self.listByFilters = channel.unary_unary(
                '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/listByFilters',
                request_serializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.ListPipelinesByFiltersInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.PipelineList.FromString,
                _registered_method=True)
        self.getLastPipelineByServiceId = channel.unary_unary(
                '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/getLastPipelineByServiceId',
                request_serializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_service_dot_v1_dot_io__pb2.ServiceId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_api__pb2.Pipeline.FromString,
                _registered_method=True)
        self.streamPipelinesByOrg = channel.unary_stream(
                '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/streamPipelinesByOrg',
                request_serializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.StreamPipelinesByOrgInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_api__pb2.Pipeline.FromString,
                _registered_method=True)
        self.listServiceRepoPipelineFiles = channel.unary_unary(
                '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/listServiceRepoPipelineFiles',
                request_serializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.ListServiceRepoPipelineFilesInput.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.ServiceRepoPipelineFileList.FromString,
                _registered_method=True)


class PipelineQueryControllerServicer(object):
    """pipeline query controller
    """

    def get(self, request, context):
        """lookup pipeline using pipeline id
        authorization is handled explicitly. caller should be a member of the organization to which the service belongs to.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStatusStream(self, request, context):
        """streams pipeline status for a given pipeline id in real-time when the pipeline is still in progress.
        the status is loaded from redis event stream.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLogStream(self, request, context):
        """streams pipeline logs for a given pipeline id in real-time when the pipeline is still in progress.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listByFilters(self, request, context):
        """authorization is handled explicitly. caller should be a member of the organization to which the service belongs to.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLastPipelineByServiceId(self, request, context):
        """authorization is handled explicitly. caller should be a member of the organization to which the service belongs to.
        look up the most recent pipeline for a given service id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamPipelinesByOrg(self, request, context):
        """Streams Pipeline execution records for a single organization.

        Used mainly by the Billing service to compute runnerâ€‘minute usage. The call
        emits every Pipeline whose execution window overlaps the supplied time range.
        The caller must hold `operator` permission on the `platform` resource kind.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listServiceRepoPipelineFiles(self, request, context):
        """Lists Tekton pipeline files (with content) configured for a Service.
        Service Hub resolves credentials and calls Integration.Git find/list APIs
        under the hood, applying Planton conventions (.planton/, .tekton/, tekton/).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PipelineQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.PipelineId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_api__pb2.Pipeline.SerializeToString,
            ),
            'getStatusStream': grpc.unary_stream_rpc_method_handler(
                    servicer.getStatusStream,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.PipelineId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_api__pb2.PipelineStatus.SerializeToString,
            ),
            'getLogStream': grpc.unary_stream_rpc_method_handler(
                    servicer.getLogStream,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.PipelineId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_integration_dot_tekton_dot_log__pb2.TektonTaskLogEntry.SerializeToString,
            ),
            'listByFilters': grpc.unary_unary_rpc_method_handler(
                    servicer.listByFilters,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.ListPipelinesByFiltersInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.PipelineList.SerializeToString,
            ),
            'getLastPipelineByServiceId': grpc.unary_unary_rpc_method_handler(
                    servicer.getLastPipelineByServiceId,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_service_dot_v1_dot_io__pb2.ServiceId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_api__pb2.Pipeline.SerializeToString,
            ),
            'streamPipelinesByOrg': grpc.unary_stream_rpc_method_handler(
                    servicer.streamPipelinesByOrg,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.StreamPipelinesByOrgInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_api__pb2.Pipeline.SerializeToString,
            ),
            'listServiceRepoPipelineFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.listServiceRepoPipelineFiles,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.ListServiceRepoPipelineFilesInput.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.ServiceRepoPipelineFileList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PipelineQueryController(object):
    """pipeline query controller
    """

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/get',
            cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.PipelineId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_api__pb2.Pipeline.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getStatusStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/getStatusStream',
            cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.PipelineId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_api__pb2.PipelineStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getLogStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/getLogStream',
            cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.PipelineId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_integration_dot_tekton_dot_log__pb2.TektonTaskLogEntry.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listByFilters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/listByFilters',
            cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.ListPipelinesByFiltersInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.PipelineList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getLastPipelineByServiceId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/getLastPipelineByServiceId',
            cloud_dot_planton_dot_apis_dot_servicehub_dot_service_dot_v1_dot_io__pb2.ServiceId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_api__pb2.Pipeline.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def streamPipelinesByOrg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/streamPipelinesByOrg',
            cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.StreamPipelinesByOrgInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_api__pb2.Pipeline.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listServiceRepoPipelineFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.servicehub.pipeline.v1.PipelineQueryController/listServiceRepoPipelineFiles',
            cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.ListServiceRepoPipelineFilesInput.SerializeToString,
            cloud_dot_planton_dot_apis_dot_servicehub_dot_pipeline_dot_v1_dot_io__pb2.ServiceRepoPipelineFileList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
