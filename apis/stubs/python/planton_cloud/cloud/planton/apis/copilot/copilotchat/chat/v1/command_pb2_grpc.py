# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.copilot.copilotchat.chat.v1 import api_pb2 as cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2
from cloud.planton.apis.copilot.copilotchat.chat.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_io__pb2


class ChatCommandControllerStub(object):
    """chat command controller
    authorization for chat commands depends on whether the chat is for an individual chat or an api-resource-chat.
    create chat:
    - for individual chats, no authorization is required. the requester becomes the owner of the chat on creation.
    - if the resource-kind in the input is not identity-account, then the chat is considered as an api-resource chat,
    then permission is verified against the api-resource itself. requester should have get permission on the api-resource to create chat.
    update & delete chat:
    - requester should have update permission on the api-resource to update or delete chat.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.apply = channel.unary_unary(
                '/cloud.planton.apis.copilot.copilotchat.chat.v1.ChatCommandController/apply',
                request_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.FromString,
                _registered_method=True)
        self.create = channel.unary_unary(
                '/cloud.planton.apis.copilot.copilotchat.chat.v1.ChatCommandController/create',
                request_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.FromString,
                _registered_method=True)
        self.update = channel.unary_unary(
                '/cloud.planton.apis.copilot.copilotchat.chat.v1.ChatCommandController/update',
                request_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.FromString,
                _registered_method=True)
        self.delete = channel.unary_unary(
                '/cloud.planton.apis.copilot.copilotchat.chat.v1.ChatCommandController/delete',
                request_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_io__pb2.ChatId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.FromString,
                _registered_method=True)


class ChatCommandControllerServicer(object):
    """chat command controller
    authorization for chat commands depends on whether the chat is for an individual chat or an api-resource-chat.
    create chat:
    - for individual chats, no authorization is required. the requester becomes the owner of the chat on creation.
    - if the resource-kind in the input is not identity-account, then the chat is considered as an api-resource chat,
    then permission is verified against the api-resource itself. requester should have get permission on the api-resource to create chat.
    update & delete chat:
    - requester should have update permission on the api-resource to update or delete chat.
    """

    def apply(self, request, context):
        """create or apply chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
        """create chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """update chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """delete chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatCommandControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'apply': grpc.unary_unary_rpc_method_handler(
                    servicer.apply,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.SerializeToString,
            ),
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_io__pb2.ChatId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.copilot.copilotchat.chat.v1.ChatCommandController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.copilot.copilotchat.chat.v1.ChatCommandController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChatCommandController(object):
    """chat command controller
    authorization for chat commands depends on whether the chat is for an individual chat or an api-resource-chat.
    create chat:
    - for individual chats, no authorization is required. the requester becomes the owner of the chat on creation.
    - if the resource-kind in the input is not identity-account, then the chat is considered as an api-resource chat,
    then permission is verified against the api-resource itself. requester should have get permission on the api-resource to create chat.
    update & delete chat:
    - requester should have update permission on the api-resource to update or delete chat.
    """

    @staticmethod
    def apply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.copilot.copilotchat.chat.v1.ChatCommandController/apply',
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.SerializeToString,
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.copilot.copilotchat.chat.v1.ChatCommandController/create',
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.SerializeToString,
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.copilot.copilotchat.chat.v1.ChatCommandController/update',
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.SerializeToString,
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.copilot.copilotchat.chat.v1.ChatCommandController/delete',
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_io__pb2.ChatId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chat_dot_v1_dot_api__pb2.Chat.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
