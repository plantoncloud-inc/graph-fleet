# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.copilot.copilotchat.chatmessage.v1 import api_pb2 as cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2
from cloud.planton.apis.copilot.copilotchat.chatmessage.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_io__pb2


class ChatMessageCommandControllerStub(object):
    """-----------------------------------------------------------------------------
    ChatMessageCommandController
    -----------------------------------------------------------------------------
    This controller owns all **write** operations for `ChatMessage` resources
    flowing through PlantonCloud.

    • **create** – invoked by the frontend when a **human user** sends a new
    message. It persists the message and kicks off downstream NLU processing.

    • **upsert** – invoked by the NLU / multi-agent system to store intermediate
    progress events *and* the eventual final answer. It can be called multiple
    times with the same `ChatMessage.id`:

    ┌─ call #1 … NLU starts thinking ──────────────────────────────────────┐
    │   content = ""                                                      │
    │   progressEvents += "Thinking about your request…"                  │
    ├─ call #n … more progress                                            │
    │   content = ""                                                      │
    │   progressEvents += "Gathering repository data…"                    │
    └─ final call … response ready                                        │
    content = "Here is the deployment plan…"                          │
    progressEvents += "Done."                                         │
    │
    Each call either appends to `progress_events` or sets/overwrites
    `content`, guaranteeing that the chat history and real-time updates
    remain consistent for Copilot clients.

    Both RPCs enforce identical authorization semantics: callers must have
    appropriate `update` or `get` rights on the underlying chat or API resource
    as described below.
    -----------------------------------------------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.apply = channel.unary_unary(
                '/cloud.planton.apis.copilot.copilotchat.chatmessage.v1.ChatMessageCommandController/apply',
                request_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.FromString,
                _registered_method=True)
        self.create = channel.unary_unary(
                '/cloud.planton.apis.copilot.copilotchat.chatmessage.v1.ChatMessageCommandController/create',
                request_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.FromString,
                _registered_method=True)
        self.update = channel.unary_unary(
                '/cloud.planton.apis.copilot.copilotchat.chatmessage.v1.ChatMessageCommandController/update',
                request_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.FromString,
                _registered_method=True)
        self.delete = channel.unary_unary(
                '/cloud.planton.apis.copilot.copilotchat.chatmessage.v1.ChatMessageCommandController/delete',
                request_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_io__pb2.ChatMessageId.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.FromString,
                _registered_method=True)


class ChatMessageCommandControllerServicer(object):
    """-----------------------------------------------------------------------------
    ChatMessageCommandController
    -----------------------------------------------------------------------------
    This controller owns all **write** operations for `ChatMessage` resources
    flowing through PlantonCloud.

    • **create** – invoked by the frontend when a **human user** sends a new
    message. It persists the message and kicks off downstream NLU processing.

    • **upsert** – invoked by the NLU / multi-agent system to store intermediate
    progress events *and* the eventual final answer. It can be called multiple
    times with the same `ChatMessage.id`:

    ┌─ call #1 … NLU starts thinking ──────────────────────────────────────┐
    │   content = ""                                                      │
    │   progressEvents += "Thinking about your request…"                  │
    ├─ call #n … more progress                                            │
    │   content = ""                                                      │
    │   progressEvents += "Gathering repository data…"                    │
    └─ final call … response ready                                        │
    content = "Here is the deployment plan…"                          │
    progressEvents += "Done."                                         │
    │
    Each call either appends to `progress_events` or sets/overwrites
    `content`, guaranteeing that the chat history and real-time updates
    remain consistent for Copilot clients.

    Both RPCs enforce identical authorization semantics: callers must have
    appropriate `update` or `get` rights on the underlying chat or API resource
    as described below.
    -----------------------------------------------------------------------------
    """

    def apply(self, request, context):
        """---------------------------------------------------------------------------
        apply
        ---------------------------------------------------------------------------
        Called by the NLU / LLM multi-agent service to:
        1. **Append progress events** while an answer is being generated.
        – pass `content = ""`, set `progress_events += "<update>"`.
        2. **Finalize** the response once ready.
        – pass `content = "<final answer>"`, include all accumulated progress
        events in `progress_events`.

        The same authorization rules as `create` apply. This RPC may be invoked
        many times for the same `ChatMessage.id` until the final answer is stored.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
        """---------------------------------------------------------------------------
        create
        ---------------------------------------------------------------------------
        Frontend-only entry point used when **end-users** post new messages.
        After persisting the message, the system publishes an event that triggers
        downstream NLU processing and agent orchestration.

        Authorization:
        • If the message targets an individual chat, the requester must have
        *update* permission on that chat (identified by `chat_id`).
        • If the target is an API-resource chat, requester must have *get* access
        to that API resource.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatMessageCommandControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'apply': grpc.unary_unary_rpc_method_handler(
                    servicer.apply,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.SerializeToString,
            ),
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_io__pb2.ChatMessageId.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.copilot.copilotchat.chatmessage.v1.ChatMessageCommandController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.copilot.copilotchat.chatmessage.v1.ChatMessageCommandController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChatMessageCommandController(object):
    """-----------------------------------------------------------------------------
    ChatMessageCommandController
    -----------------------------------------------------------------------------
    This controller owns all **write** operations for `ChatMessage` resources
    flowing through PlantonCloud.

    • **create** – invoked by the frontend when a **human user** sends a new
    message. It persists the message and kicks off downstream NLU processing.

    • **upsert** – invoked by the NLU / multi-agent system to store intermediate
    progress events *and* the eventual final answer. It can be called multiple
    times with the same `ChatMessage.id`:

    ┌─ call #1 … NLU starts thinking ──────────────────────────────────────┐
    │   content = ""                                                      │
    │   progressEvents += "Thinking about your request…"                  │
    ├─ call #n … more progress                                            │
    │   content = ""                                                      │
    │   progressEvents += "Gathering repository data…"                    │
    └─ final call … response ready                                        │
    content = "Here is the deployment plan…"                          │
    progressEvents += "Done."                                         │
    │
    Each call either appends to `progress_events` or sets/overwrites
    `content`, guaranteeing that the chat history and real-time updates
    remain consistent for Copilot clients.

    Both RPCs enforce identical authorization semantics: callers must have
    appropriate `update` or `get` rights on the underlying chat or API resource
    as described below.
    -----------------------------------------------------------------------------
    """

    @staticmethod
    def apply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.copilot.copilotchat.chatmessage.v1.ChatMessageCommandController/apply',
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.SerializeToString,
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.copilot.copilotchat.chatmessage.v1.ChatMessageCommandController/create',
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.SerializeToString,
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.copilot.copilotchat.chatmessage.v1.ChatMessageCommandController/update',
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.SerializeToString,
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.copilot.copilotchat.chatmessage.v1.ChatMessageCommandController/delete',
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_io__pb2.ChatMessageId.SerializeToString,
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotchat_dot_chatmessage_dot_v1_dot_api__pb2.ChatMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
