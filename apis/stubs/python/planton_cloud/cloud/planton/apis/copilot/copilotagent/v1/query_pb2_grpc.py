# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cloud.planton.apis.copilot.copilotagent.v1 import io_pb2 as cloud_dot_planton_dot_apis_dot_copilot_dot_copilotagent_dot_v1_dot_io__pb2


class CopilotAgentQueryControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.generateChatName = channel.unary_unary(
                '/cloud.planton.apis.copilot.copilotagent.v1.CopilotAgentQueryController/generateChatName',
                request_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotagent_dot_v1_dot_io__pb2.GenerateChatNameRequest.SerializeToString,
                response_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotagent_dot_v1_dot_io__pb2.GenerateChatNameResponse.FromString,
                _registered_method=True)


class CopilotAgentQueryControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def generateChatName(self, request, context):
        """---------------------------------------------------------------------------
        generateChatName
        ---------------------------------------------------------------------------
        PURPOSE
        Derives a concise, user-friendly title for an existing chat session
        (e.g. “Terraform Module Ideas”).  The method is **purely informational**
        and therefore belongs on the *Query* side of the API: it does not
        persist data, mutate state, or emit domain events.

        REQUEST  (GenerateChatNameRequest)
        • string chat_id
        Mandatory. Stable identifier of the conversation whose stored
        message history will be analysed to craft the title.  The server
        MUST validate existence of the chat and MAY canonicalise the ID
        (e.g. trim, lowercase) for cache efficiency.

        RESPONSE (GenerateChatNameResponse)
        • string suggested_name
        A single-line, UTF-8 title that fits comfortably in list views.
        Guidelines:
        – ≤ 63 visible characters when possible
        – Avoid trailing punctuation
        – Preserve input language for non-English chats where feasible

        CHARACTERISTICS
        • Read-only & idempotent: identical chat_id → identical output when the
        underlying model temperature ≤ 0.2.  Safe to retry and cache.
        • Deterministic caching: servers MAY normalise the ID to improve hit rate.
        • Security: do not log PII.  Run both prompt and model output through
        content-filtering / redaction pipelines before storage or telemetry.
        • Uniqueness is *not* enforced here—handle duplicates in the command
        layer when the chat is actually created.

        PERFORMANCE
        • Typical LLM latency: 200–800 ms.  If sub-200 ms is required, cache
        previous results or use streaming inference with a partial update
        mechanism on the client.

        EXAMPLE
        Input : chat_id = "chat-9f7c2b"
        Output: "Terraform AppSync Module Ideas"

        ---------------------------------------------------------------------------
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CopilotAgentQueryControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'generateChatName': grpc.unary_unary_rpc_method_handler(
                    servicer.generateChatName,
                    request_deserializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotagent_dot_v1_dot_io__pb2.GenerateChatNameRequest.FromString,
                    response_serializer=cloud_dot_planton_dot_apis_dot_copilot_dot_copilotagent_dot_v1_dot_io__pb2.GenerateChatNameResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloud.planton.apis.copilot.copilotagent.v1.CopilotAgentQueryController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cloud.planton.apis.copilot.copilotagent.v1.CopilotAgentQueryController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CopilotAgentQueryController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def generateChatName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cloud.planton.apis.copilot.copilotagent.v1.CopilotAgentQueryController/generateChatName',
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotagent_dot_v1_dot_io__pb2.GenerateChatNameRequest.SerializeToString,
            cloud_dot_planton_dot_apis_dot_copilot_dot_copilotagent_dot_v1_dot_io__pb2.GenerateChatNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
