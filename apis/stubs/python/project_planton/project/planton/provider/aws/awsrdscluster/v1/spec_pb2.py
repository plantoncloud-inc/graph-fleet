# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: project/planton/provider/aws/awsrdscluster/v1/spec.proto
# Protobuf Python Version: 6.31.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    31,
    1,
    '',
    'project/planton/provider/aws/awsrdscluster/v1/spec.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from buf.validate import validate_pb2 as buf_dot_validate_dot_validate__pb2
from project.planton.shared.foreignkey.v1 import foreign_key_pb2 as project_dot_planton_dot_shared_dot_foreignkey_dot_v1_dot_foreign__key__pb2
from project.planton.shared.options import options_pb2 as project_dot_planton_dot_shared_dot_options_dot_options__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n8project/planton/provider/aws/awsrdscluster/v1/spec.proto\x12-project.planton.provider.aws.awsrdscluster.v1\x1a\x1b\x62uf/validate/validate.proto\x1a\x36project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\"\xab\x1e\n\x11\x41wsRdsClusterSpec\x12\x85\x01\n\nsubnet_ids\x18\x01 \x03(\x0b\x32\x36.project.planton.shared.foreignkey.v1.StringValueOrRefB.\x88\xd4\x61\xd9\x01\x92\xd4\x61%status.outputs.private_subnets.[*].idR\tsubnetIds\x12g\n\x14\x64\x62_subnet_group_name\x18\x02 \x01(\x0b\x32\x36.project.planton.shared.foreignkey.v1.StringValueOrRefR\x11\x64\x62SubnetGroupName\x12\x8f\x01\n\x12security_group_ids\x18\x03 \x03(\x0b\x32\x36.project.planton.shared.foreignkey.v1.StringValueOrRefB)\x88\xd4\x61\xd7\x01\x92\xd4\x61 status.outputs.security_group_idR\x10securityGroupIds\x12\xa1\x01\n\x13\x61llowed_cidr_blocks\x18\x04 \x03(\tBq\xbaHn\x92\x01k\x18\x01\"gre2c^(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}/(?:[0-9]|[12]\\d|3[0-2])$R\x11\x61llowedCidrBlocks\x12\xa2\x01\n\x1c\x61ssociate_security_group_ids\x18\x05 \x03(\x0b\x32\x36.project.planton.shared.foreignkey.v1.StringValueOrRefB)\x88\xd4\x61\xd7\x01\x92\xd4\x61 status.outputs.security_group_idR\x19\x61ssociateSecurityGroupIds\x12#\n\rdatabase_name\x18\x06 \x01(\tR\x0c\x64\x61tabaseName\x12G\n\x1bmanage_master_user_password\x18\x07 \x01(\x08\x42\x08\x92\xa6\x1d\x04trueR\x18manageMasterUserPassword\x12\x98\x01\n\x1dmaster_user_secret_kms_key_id\x18\x08 \x01(\x0b\x32\x36.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1f\x88\xd4\x61\xdc\x01\x92\xd4\x61\x16status.outputs.key_arnR\x18masterUserSecretKmsKeyId\x12+\n\x08username\x18\t \x01(\tB\n\x8a\xa6\x1d\x06masterH\x00R\x08username\x88\x01\x01\x12\x1a\n\x08password\x18\n \x01(\tR\x08password\x12\x1f\n\x04port\x18\x0b \x01(\x05\x42\x0b\xbaH\x08\x1a\x06\x18\xff\xff\x03(\x00R\x04port\x12\x1e\n\x06\x65ngine\x18\x0c \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x06\x65ngine\x12-\n\x0e\x65ngine_version\x18\r \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\rengineVersion\x12+\n\x11storage_encrypted\x18\x0e \x01(\x08R\x10storageEncrypted\x12u\n\nkms_key_id\x18\x0f \x01(\x0b\x32\x36.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1f\x88\xd4\x61\xdc\x01\x92\xd4\x61\x16status.outputs.key_arnR\x08kmsKeyId\x12O\n\x1f\x65nabled_cloudwatch_logs_exports\x18\x10 \x03(\tB\x08\xbaH\x05\x92\x01\x02\x18\x01R\x1c\x65nabledCloudwatchLogsExports\x12/\n\x13\x64\x65letion_protection\x18\x11 \x01(\x08R\x12\x64\x65letionProtection\x12\xc3\x01\n\x1cpreferred_maintenance_window\x18\x12 \x01(\tB\x80\x01\xbaH}r{2y^(mon|tue|wed|thu|fri|sat|sun):([01][0-9]|2[0-3]):[0-5][0-9]-(mon|tue|wed|thu|fri|sat|sun):([01][0-9]|2[0-3]):[0-5][0-9]$R\x1apreferredMaintenanceWindow\x12\x41\n\x17\x62\x61\x63kup_retention_period\x18\x13 \x01(\x05\x42\t\xbaH\x06\x1a\x04\x18#(\x00R\x15\x62\x61\x63kupRetentionPeriod\x12|\n\x17preferred_backup_window\x18\x14 \x01(\tBD\xbaHAr?2=^([01][0-9]|2[0-3]):[0-5][0-9]-([01][0-9]|2[0-3]):[0-5][0-9]$R\x15preferredBackupWindow\x12\x31\n\x15\x63opy_tags_to_snapshot\x18\x15 \x01(\x08R\x12\x63opyTagsToSnapshot\x12.\n\x13skip_final_snapshot\x18\x16 \x01(\x08R\x11skipFinalSnapshot\x12:\n\x19\x66inal_snapshot_identifier\x18\x17 \x01(\tR\x17\x66inalSnapshotIdentifier\x12M\n#iam_database_authentication_enabled\x18\x18 \x01(\x08R iamDatabaseAuthenticationEnabled\x12\x30\n\x14\x65nable_http_endpoint\x18\x19 \x01(\x08R\x12\x65nableHttpEndpoint\x12\x90\x01\n\x15serverless_v2_scaling\x18\x1a \x01(\x0b\x32\\.project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterServerlessV2ScalingConfigurationR\x13serverlessV2Scaling\x12/\n\x13snapshot_identifier\x18\x1b \x01(\tR\x12snapshotIdentifier\x12\x42\n\x1dreplication_source_identifier\x18\x1c \x01(\tR\x1breplicationSourceIdentifier\x12\x44\n\x1f\x64\x62_cluster_parameter_group_name\x18\x1d \x01(\tR\x1b\x64\x62\x43lusterParameterGroupName\x12\x65\n\nparameters\x18\x1e \x03(\x0b\x32\x45.project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterParameterR\nparameters\x12m\n\x06vpc_id\x18\x1f \x01(\x0b\x32\x36.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1e\x88\xd4\x61\xd9\x01\x92\xd4\x61\x15status.outputs.vpc_idR\x05vpcId\x12\x1f\n\x0b\x65ngine_mode\x18  \x01(\tR\nengineMode\x12\x41\n\x0cstorage_type\x18! \x01(\tB\x1e\xbaH\x1br\x16R\x06\x61uroraR\x0c\x61urora-iopt1\xd8\x01\x01R\x0bstorageType:\xa5\x08\xbaH\xa1\x08\x1a\xbf\x01\n,final_snapshot_id_required_when_not_skipping\x12Gfinal_snapshot_identifier must be set when skip_final_snapshot is false\x1a\x46this.skip_final_snapshot ? true : this.final_snapshot_identifier != \"\"\x1a\x8c\x01\n\x10subnets_or_group\x12\x37Provide either subnet_ids (>=2) or db_subnet_group_name\x1a?(this.subnet_ids.size() >= 2) || has(this.db_subnet_group_name)\x1a\x9b\x01\n\x19password_mutual_exclusion\x12?password cannot be set when manage_master_user_password is true\x1a=this.manage_master_user_password ? this.password == \"\" : true\x1a\xb2\x01\n\x13\x65ngine_mode_allowed\x12:engine_mode, if set, must be \'serverless\' or \'provisioned\'\x1a_this.engine_mode == \"\" || this.engine_mode == \"serverless\" || this.engine_mode == \"provisioned\"\x1a\xfa\x02\n\x19logs_exports_match_engine\x12\x38\x65nabled_cloudwatch_logs_exports must match engine family\x1a\xa2\x02this.engine.startsWith(\"aurora-mysql\") ? this.enabled_cloudwatch_logs_exports.all(x, x == \"audit\" || x == \"error\" || x == \"general\" || x == \"slowquery\") : (this.engine.startsWith(\"aurora-postgresql\") ? this.enabled_cloudwatch_logs_exports.all(x, x == \"postgresql\" || x == \"upgrade\") : true)B\x0b\n\t_username\"e\n\x16\x41wsRdsClusterParameter\x12!\n\x0c\x61pply_method\x18\x01 \x01(\tR\x0b\x61pplyMethod\x12\x12\n\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n\x05value\x18\x03 \x01(\tR\x05value\"\xa9\x02\n-AwsRdsClusterServerlessV2ScalingConfiguration\x12\x31\n\x0cmin_capacity\x18\x01 \x01(\x01\x42\x0e\xbaH\x0b\x12\t!\x00\x00\x00\x00\x00\x00\x00\x00R\x0bminCapacity\x12!\n\x0cmax_capacity\x18\x02 \x01(\x01R\x0bmaxCapacity:\xa1\x01\xbaH\x9d\x01\x1a\x9a\x01\n\x1cserverless_v2_scaling_bounds\x12\x36max_capacity must be >= min_capacity when both are set\x1a\x42this.max_capacity == 0.0 || this.max_capacity >= this.min_capacityB\x99\x02\n1com.project.planton.provider.aws.awsrdscluster.v1B\tSpecProtoP\x01\xa2\x02\x05PPPAA\xaa\x02-Project.Planton.Provider.Aws.Awsrdscluster.V1\xca\x02-Project\\Planton\\Provider\\Aws\\Awsrdscluster\\V1\xe2\x02\x39Project\\Planton\\Provider\\Aws\\Awsrdscluster\\V1\\GPBMetadata\xea\x02\x32Project::Planton::Provider::Aws::Awsrdscluster::V1b\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'project.planton.provider.aws.awsrdscluster.v1.spec_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n1com.project.planton.provider.aws.awsrdscluster.v1B\tSpecProtoP\001\242\002\005PPPAA\252\002-Project.Planton.Provider.Aws.Awsrdscluster.V1\312\002-Project\\Planton\\Provider\\Aws\\Awsrdscluster\\V1\342\0029Project\\Planton\\Provider\\Aws\\Awsrdscluster\\V1\\GPBMetadata\352\0022Project::Planton::Provider::Aws::Awsrdscluster::V1'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['subnet_ids']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['subnet_ids']._serialized_options = b'\210\324a\331\001\222\324a%status.outputs.private_subnets.[*].id'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['security_group_ids']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['security_group_ids']._serialized_options = b'\210\324a\327\001\222\324a status.outputs.security_group_id'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['allowed_cidr_blocks']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['allowed_cidr_blocks']._serialized_options = b'\272Hn\222\001k\030\001\"gre2c^(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}/(?:[0-9]|[12]\\d|3[0-2])$'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['associate_security_group_ids']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['associate_security_group_ids']._serialized_options = b'\210\324a\327\001\222\324a status.outputs.security_group_id'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['manage_master_user_password']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['manage_master_user_password']._serialized_options = b'\222\246\035\004true'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['master_user_secret_kms_key_id']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['master_user_secret_kms_key_id']._serialized_options = b'\210\324a\334\001\222\324a\026status.outputs.key_arn'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['username']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['username']._serialized_options = b'\212\246\035\006master'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['port']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['port']._serialized_options = b'\272H\010\032\006\030\377\377\003(\000'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['engine']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['engine']._serialized_options = b'\272H\003\310\001\001'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['engine_version']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['engine_version']._serialized_options = b'\272H\003\310\001\001'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['kms_key_id']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['kms_key_id']._serialized_options = b'\210\324a\334\001\222\324a\026status.outputs.key_arn'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['enabled_cloudwatch_logs_exports']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['enabled_cloudwatch_logs_exports']._serialized_options = b'\272H\005\222\001\002\030\001'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['preferred_maintenance_window']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['preferred_maintenance_window']._serialized_options = b'\272H}r{2y^(mon|tue|wed|thu|fri|sat|sun):([01][0-9]|2[0-3]):[0-5][0-9]-(mon|tue|wed|thu|fri|sat|sun):([01][0-9]|2[0-3]):[0-5][0-9]$'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['backup_retention_period']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['backup_retention_period']._serialized_options = b'\272H\006\032\004\030#(\000'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['preferred_backup_window']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['preferred_backup_window']._serialized_options = b'\272HAr?2=^([01][0-9]|2[0-3]):[0-5][0-9]-([01][0-9]|2[0-3]):[0-5][0-9]$'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['vpc_id']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['vpc_id']._serialized_options = b'\210\324a\331\001\222\324a\025status.outputs.vpc_id'
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['storage_type']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC'].fields_by_name['storage_type']._serialized_options = b'\272H\033r\026R\006auroraR\014aurora-iopt1\330\001\001'
  _globals['_AWSRDSCLUSTERSPEC']._loaded_options = None
  _globals['_AWSRDSCLUSTERSPEC']._serialized_options = b'\272H\241\010\032\277\001\n,final_snapshot_id_required_when_not_skipping\022Gfinal_snapshot_identifier must be set when skip_final_snapshot is false\032Fthis.skip_final_snapshot ? true : this.final_snapshot_identifier != \"\"\032\214\001\n\020subnets_or_group\0227Provide either subnet_ids (>=2) or db_subnet_group_name\032?(this.subnet_ids.size() >= 2) || has(this.db_subnet_group_name)\032\233\001\n\031password_mutual_exclusion\022?password cannot be set when manage_master_user_password is true\032=this.manage_master_user_password ? this.password == \"\" : true\032\262\001\n\023engine_mode_allowed\022:engine_mode, if set, must be \'serverless\' or \'provisioned\'\032_this.engine_mode == \"\" || this.engine_mode == \"serverless\" || this.engine_mode == \"provisioned\"\032\372\002\n\031logs_exports_match_engine\0228enabled_cloudwatch_logs_exports must match engine family\032\242\002this.engine.startsWith(\"aurora-mysql\") ? this.enabled_cloudwatch_logs_exports.all(x, x == \"audit\" || x == \"error\" || x == \"general\" || x == \"slowquery\") : (this.engine.startsWith(\"aurora-postgresql\") ? this.enabled_cloudwatch_logs_exports.all(x, x == \"postgresql\" || x == \"upgrade\") : true)'
  _globals['_AWSRDSCLUSTERSERVERLESSV2SCALINGCONFIGURATION'].fields_by_name['min_capacity']._loaded_options = None
  _globals['_AWSRDSCLUSTERSERVERLESSV2SCALINGCONFIGURATION'].fields_by_name['min_capacity']._serialized_options = b'\272H\013\022\t!\000\000\000\000\000\000\000\000'
  _globals['_AWSRDSCLUSTERSERVERLESSV2SCALINGCONFIGURATION']._loaded_options = None
  _globals['_AWSRDSCLUSTERSERVERLESSV2SCALINGCONFIGURATION']._serialized_options = b'\272H\235\001\032\232\001\n\034serverless_v2_scaling_bounds\0226max_capacity must be >= min_capacity when both are set\032Bthis.max_capacity == 0.0 || this.max_capacity >= this.min_capacity'
  _globals['_AWSRDSCLUSTERSPEC']._serialized_start=239
  _globals['_AWSRDSCLUSTERSPEC']._serialized_end=4122
  _globals['_AWSRDSCLUSTERPARAMETER']._serialized_start=4124
  _globals['_AWSRDSCLUSTERPARAMETER']._serialized_end=4225
  _globals['_AWSRDSCLUSTERSERVERLESSV2SCALINGCONFIGURATION']._serialized_start=4228
  _globals['_AWSRDSCLUSTERSERVERLESSV2SCALINGCONFIGURATION']._serialized_end=4525
# @@protoc_insertion_point(module_scope)
