# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: project/planton/provider/aws/awsclientvpn/v1/spec.proto
# Protobuf Python Version: 6.31.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    31,
    1,
    '',
    'project/planton/provider/aws/awsclientvpn/v1/spec.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from buf.validate import validate_pb2 as buf_dot_validate_dot_validate__pb2
from project.planton.shared.foreignkey.v1 import foreign_key_pb2 as project_dot_planton_dot_shared_dot_foreignkey_dot_v1_dot_foreign__key__pb2
from project.planton.shared.options import options_pb2 as project_dot_planton_dot_shared_dot_options_dot_options__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n7project/planton/provider/aws/awsclientvpn/v1/spec.proto\x12,project.planton.provider.aws.awsclientvpn.v1\x1a\x1b\x62uf/validate/validate.proto\x1a\x36project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\"\x91\x10\n\x10\x41wsClientVpnSpec\x12 \n\x0b\x64\x65scription\x18\x01 \x01(\tR\x0b\x64\x65scription\x12s\n\x06vpc_id\x18\x02 \x01(\x0b\x32\x36.project.planton.shared.foreignkey.v1.StringValueOrRefB$\xbaH\x03\xc8\x01\x01\x88\xd4\x61\xd9\x01\x92\xd4\x61\x15status.outputs.vpc_idR\x05vpcId\x12\x62\n\x07subnets\x18\x03 \x03(\x0b\x32\x36.project.planton.shared.foreignkey.v1.StringValueOrRefB\x10\xbaH\x08\x92\x01\x02\x08\x01\xc8\x01\x01\x88\xd4\x61\xd9\x01R\x07subnets\x12m\n\x11\x63lient_cidr_block\x18\x04 \x01(\tBA\xbaH>r927^([0-9]{1,3}\\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$\xc8\x01\x01R\x0f\x63lientCidrBlock\x12\x87\x01\n\x13\x61uthentication_type\x18\x05 \x01(\x0e\x32L.project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnAuthenticationTypeB\x08\xbaH\x05\x82\x01\x02\x10\x01R\x12\x61uthenticationType\x12\x94\x01\n\x16server_certificate_arn\x18\x06 \x01(\x0b\x32\x36.project.planton.shared.foreignkey.v1.StringValueOrRefB&\xbaH\x03\xc8\x01\x01\x88\xd4\x61\xc9\x01\x92\xd4\x61\x17status.outputs.cert_arnR\x14serverCertificateArn\x12\x42\n\x18\x63idr_authorization_rules\x18\x07 \x03(\tB\x08\xbaH\x05\x92\x01\x02\x18\x01R\x16\x63idrAuthorizationRules\x12\x30\n\x14\x64isable_split_tunnel\x18\x08 \x01(\x08R\x12\x64isableSplitTunnel\x12\'\n\x08vpn_port\x18\t \x01(\x05\x42\x07\x8a\xa6\x1d\x03\x34\x34\x33H\x00R\x07vpnPort\x88\x01\x01\x12\x8b\x01\n\x12transport_protocol\x18\n \x01(\x0e\x32K.project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnTransportProtocolB\x0f\xbaH\x05\x82\x01\x02\x10\x01\x92\xa6\x1d\x03tcpR\x11transportProtocol\x12$\n\x0elog_group_name\x18\x0b \x01(\tR\x0clogGroupName\x12\x8a\x01\n\x0fsecurity_groups\x18\x0c \x03(\x0b\x32\x36.project.planton.shared.foreignkey.v1.StringValueOrRefB)\x88\xd4\x61\xd7\x01\x92\xd4\x61 status.outputs.security_group_idR\x0esecurityGroups\x12+\n\x0b\x64ns_servers\x18\r \x03(\tB\n\xbaH\x07\x92\x01\x04\x10\x02\x18\x01R\ndnsServers:\xd7\x06\xbaH\xd3\x06\x1ay\n\x10vpn_port_allowed\x12\x31vpn_port must be 443 (TCP) or 1194 (UDP) when set\x1a\x32this.vpn_port == 0 || this.vpn_port in [443, 1194]\x1a\x94\x02\n\x15protocol_port_pairing\x12Qwhen both are set, transport_protocol must match vpn_port (TCP\xe2\x86\x94\x34\x34\x33, UDP\xe2\x86\x94\x31\x31\x39\x34)\x1a\xa7\x01this.vpn_port == 0 || this.transport_protocol == 0 || (this.transport_protocol == 2 && this.vpn_port == 443) || (this.transport_protocol == 1 && this.vpn_port == 1194)\x1ai\n\x0e\x61uth_supported\x12\x38only certificate-based authentication is supported in v1\x1a\x1dthis.authentication_type == 0\x1a\xc4\x01\n\x16\x63idr_auth_rules_format\x12=each cidr_authorization_rules entry must be a valid IPv4 CIDR\x1akthis.cidr_authorization_rules.all(c, c.matches(\"^([0-9]{1,3}\\\\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$\"))\x1a\x8c\x01\n\x12\x64ns_servers_format\x12\x30\x64ns_servers must be valid IPv4 addresses (max 2)\x1a\x44this.dns_servers.all(s, s.matches(\"^([0-9]{1,3}\\\\.){3}[0-9]{1,3}$\"))B\x0b\n\t_vpn_port*M\n\x1e\x41wsClientVpnAuthenticationType\x12\x0f\n\x0b\x63\x65rtificate\x10\x00\x12\r\n\tdirectory\x10\x02\x12\x0b\n\x07\x63ognito\x10\x03*d\n\x1d\x41wsClientVpnTransportProtocol\x12\x31\n-aws_client_vpn_transport_protocol_unspecified\x10\x00\x12\x07\n\x03udp\x10\x01\x12\x07\n\x03tcp\x10\x02\x42\x94\x02\n0com.project.planton.provider.aws.awsclientvpn.v1B\tSpecProtoP\x01\xa2\x02\x05PPPAA\xaa\x02,Project.Planton.Provider.Aws.Awsclientvpn.V1\xca\x02,Project\\Planton\\Provider\\Aws\\Awsclientvpn\\V1\xe2\x02\x38Project\\Planton\\Provider\\Aws\\Awsclientvpn\\V1\\GPBMetadata\xea\x02\x31Project::Planton::Provider::Aws::Awsclientvpn::V1b\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'project.planton.provider.aws.awsclientvpn.v1.spec_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n0com.project.planton.provider.aws.awsclientvpn.v1B\tSpecProtoP\001\242\002\005PPPAA\252\002,Project.Planton.Provider.Aws.Awsclientvpn.V1\312\002,Project\\Planton\\Provider\\Aws\\Awsclientvpn\\V1\342\0028Project\\Planton\\Provider\\Aws\\Awsclientvpn\\V1\\GPBMetadata\352\0021Project::Planton::Provider::Aws::Awsclientvpn::V1'
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['vpc_id']._loaded_options = None
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['vpc_id']._serialized_options = b'\272H\003\310\001\001\210\324a\331\001\222\324a\025status.outputs.vpc_id'
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['subnets']._loaded_options = None
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['subnets']._serialized_options = b'\272H\010\222\001\002\010\001\310\001\001\210\324a\331\001'
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['client_cidr_block']._loaded_options = None
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['client_cidr_block']._serialized_options = b'\272H>r927^([0-9]{1,3}\\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$\310\001\001'
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['authentication_type']._loaded_options = None
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['authentication_type']._serialized_options = b'\272H\005\202\001\002\020\001'
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['server_certificate_arn']._loaded_options = None
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['server_certificate_arn']._serialized_options = b'\272H\003\310\001\001\210\324a\311\001\222\324a\027status.outputs.cert_arn'
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['cidr_authorization_rules']._loaded_options = None
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['cidr_authorization_rules']._serialized_options = b'\272H\005\222\001\002\030\001'
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['vpn_port']._loaded_options = None
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['vpn_port']._serialized_options = b'\212\246\035\003443'
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['transport_protocol']._loaded_options = None
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['transport_protocol']._serialized_options = b'\272H\005\202\001\002\020\001\222\246\035\003tcp'
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['security_groups']._loaded_options = None
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['security_groups']._serialized_options = b'\210\324a\327\001\222\324a status.outputs.security_group_id'
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['dns_servers']._loaded_options = None
  _globals['_AWSCLIENTVPNSPEC'].fields_by_name['dns_servers']._serialized_options = b'\272H\007\222\001\004\020\002\030\001'
  _globals['_AWSCLIENTVPNSPEC']._loaded_options = None
  _globals['_AWSCLIENTVPNSPEC']._serialized_options = b'\272H\323\006\032y\n\020vpn_port_allowed\0221vpn_port must be 443 (TCP) or 1194 (UDP) when set\0322this.vpn_port == 0 || this.vpn_port in [443, 1194]\032\224\002\n\025protocol_port_pairing\022Qwhen both are set, transport_protocol must match vpn_port (TCP\342\206\224443, UDP\342\206\2241194)\032\247\001this.vpn_port == 0 || this.transport_protocol == 0 || (this.transport_protocol == 2 && this.vpn_port == 443) || (this.transport_protocol == 1 && this.vpn_port == 1194)\032i\n\016auth_supported\0228only certificate-based authentication is supported in v1\032\035this.authentication_type == 0\032\304\001\n\026cidr_auth_rules_format\022=each cidr_authorization_rules entry must be a valid IPv4 CIDR\032kthis.cidr_authorization_rules.all(c, c.matches(\"^([0-9]{1,3}\\\\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$\"))\032\214\001\n\022dns_servers_format\0220dns_servers must be valid IPv4 addresses (max 2)\032Dthis.dns_servers.all(s, s.matches(\"^([0-9]{1,3}\\\\.){3}[0-9]{1,3}$\"))'
  _globals['_AWSCLIENTVPNAUTHENTICATIONTYPE']._serialized_start=2304
  _globals['_AWSCLIENTVPNAUTHENTICATIONTYPE']._serialized_end=2381
  _globals['_AWSCLIENTVPNTRANSPORTPROTOCOL']._serialized_start=2383
  _globals['_AWSCLIENTVPNTRANSPORTPROTOCOL']._serialized_end=2483
  _globals['_AWSCLIENTVPNSPEC']._serialized_start=237
  _globals['_AWSCLIENTVPNSPEC']._serialized_end=2302
# @@protoc_insertion_point(module_scope)
